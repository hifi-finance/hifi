/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IOwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnableUpgradeable__factory>;
    getContractFactory(
      name: "IBalanceSheetV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalanceSheetV2__factory>;
    getContractFactory(
      name: "IFintroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFintroller__factory>;
    getContractFactory(
      name: "HToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HToken__factory>;
    getContractFactory(
      name: "IHToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHToken__factory>;
    getContractFactory(
      name: "IAggregatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregatorV3__factory>;
    getContractFactory(
      name: "IChainlinkOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkOperator__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Erc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20__factory>;
    getContractFactory(
      name: "Erc20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Permit__factory>;
    getContractFactory(
      name: "Erc20Recover",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Recover__factory>;
    getContractFactory(
      name: "IErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IErc20__factory>;
    getContractFactory(
      name: "IErc20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IErc20Permit__factory>;
    getContractFactory(
      name: "IErc20Recover",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IErc20Recover__factory>;
    getContractFactory(
      name: "HifiPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HifiPool__factory>;
    getContractFactory(
      name: "HifiPoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HifiPoolRegistry__factory>;
    getContractFactory(
      name: "IHifiPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHifiPool__factory>;
    getContractFactory(
      name: "IHifiPoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHifiPoolRegistry__factory>;
    getContractFactory(
      name: "YieldSpace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldSpace__factory>;
    getContractFactory(
      name: "GodModeErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GodModeErc20__factory>;
    getContractFactory(
      name: "GodModeHifiPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GodModeHifiPool__factory>;
    getContractFactory(
      name: "GodModeHifiPoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GodModeHifiPoolRegistry__factory>;
    getContractFactory(
      name: "GodModeHToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GodModeHToken__factory>;
    getContractFactory(
      name: "YieldSpaceMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldSpaceMock__factory>;

    getContractAt(
      name: "IOwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnableUpgradeable>;
    getContractAt(
      name: "IBalanceSheetV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalanceSheetV2>;
    getContractAt(
      name: "IFintroller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFintroller>;
    getContractAt(
      name: "HToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HToken>;
    getContractAt(
      name: "IHToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHToken>;
    getContractAt(
      name: "IAggregatorV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregatorV3>;
    getContractAt(
      name: "IChainlinkOperator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkOperator>;
    getContractAt(
      name: "IOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Erc20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20>;
    getContractAt(
      name: "Erc20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Permit>;
    getContractAt(
      name: "Erc20Recover",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Recover>;
    getContractAt(
      name: "IErc20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IErc20>;
    getContractAt(
      name: "IErc20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IErc20Permit>;
    getContractAt(
      name: "IErc20Recover",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IErc20Recover>;
    getContractAt(
      name: "HifiPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HifiPool>;
    getContractAt(
      name: "HifiPoolRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HifiPoolRegistry>;
    getContractAt(
      name: "IHifiPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHifiPool>;
    getContractAt(
      name: "IHifiPoolRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHifiPoolRegistry>;
    getContractAt(
      name: "YieldSpace",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldSpace>;
    getContractAt(
      name: "GodModeErc20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GodModeErc20>;
    getContractAt(
      name: "GodModeHifiPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GodModeHifiPool>;
    getContractAt(
      name: "GodModeHifiPoolRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GodModeHifiPoolRegistry>;
    getContractAt(
      name: "GodModeHToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GodModeHToken>;
    getContractAt(
      name: "YieldSpaceMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldSpaceMock>;

    deployContract(
      name: "IOwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnableUpgradeable>;
    deployContract(
      name: "IBalanceSheetV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBalanceSheetV2>;
    deployContract(
      name: "IFintroller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFintroller>;
    deployContract(
      name: "HToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HToken>;
    deployContract(
      name: "IHToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHToken>;
    deployContract(
      name: "IAggregatorV3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorV3>;
    deployContract(
      name: "IChainlinkOperator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkOperator>;
    deployContract(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Erc20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20>;
    deployContract(
      name: "Erc20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20Permit>;
    deployContract(
      name: "Erc20Recover",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20Recover>;
    deployContract(
      name: "IErc20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20>;
    deployContract(
      name: "IErc20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20Permit>;
    deployContract(
      name: "IErc20Recover",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20Recover>;
    deployContract(
      name: "HifiPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HifiPool>;
    deployContract(
      name: "HifiPoolRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HifiPoolRegistry>;
    deployContract(
      name: "IHifiPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHifiPool>;
    deployContract(
      name: "IHifiPoolRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHifiPoolRegistry>;
    deployContract(
      name: "YieldSpace",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldSpace>;
    deployContract(
      name: "GodModeErc20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeErc20>;
    deployContract(
      name: "GodModeHifiPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHifiPool>;
    deployContract(
      name: "GodModeHifiPoolRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHifiPoolRegistry>;
    deployContract(
      name: "GodModeHToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHToken>;
    deployContract(
      name: "YieldSpaceMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldSpaceMock>;

    deployContract(
      name: "IOwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnableUpgradeable>;
    deployContract(
      name: "IBalanceSheetV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBalanceSheetV2>;
    deployContract(
      name: "IFintroller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFintroller>;
    deployContract(
      name: "HToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HToken>;
    deployContract(
      name: "IHToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHToken>;
    deployContract(
      name: "IAggregatorV3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregatorV3>;
    deployContract(
      name: "IChainlinkOperator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkOperator>;
    deployContract(
      name: "IOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Erc20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20>;
    deployContract(
      name: "Erc20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20Permit>;
    deployContract(
      name: "Erc20Recover",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20Recover>;
    deployContract(
      name: "IErc20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20>;
    deployContract(
      name: "IErc20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20Permit>;
    deployContract(
      name: "IErc20Recover",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IErc20Recover>;
    deployContract(
      name: "HifiPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HifiPool>;
    deployContract(
      name: "HifiPoolRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HifiPoolRegistry>;
    deployContract(
      name: "IHifiPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHifiPool>;
    deployContract(
      name: "IHifiPoolRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHifiPoolRegistry>;
    deployContract(
      name: "YieldSpace",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldSpace>;
    deployContract(
      name: "GodModeErc20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeErc20>;
    deployContract(
      name: "GodModeHifiPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHifiPool>;
    deployContract(
      name: "GodModeHifiPoolRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHifiPoolRegistry>;
    deployContract(
      name: "GodModeHToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GodModeHToken>;
    deployContract(
      name: "YieldSpaceMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldSpaceMock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
