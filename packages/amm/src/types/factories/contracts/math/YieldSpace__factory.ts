/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  YieldSpace,
  YieldSpaceInterface,
} from "../../../contracts/math/YieldSpace";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startingReservesFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newNormalizedUnderlyingReservesFactor",
        type: "uint256",
      },
    ],
    name: "YieldSpace__HTokenOutForUnderlyingInReservesFactorsUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "hTokenReserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hTokenIn",
        type: "uint256",
      },
    ],
    name: "YieldSpace__HTokenReservesOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "hTokenReserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hTokenOut",
        type: "uint256",
      },
    ],
    name: "YieldSpace__HTokenReservesUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minuend",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "subtrahend",
        type: "uint256",
      },
    ],
    name: "YieldSpace__LossyPrecisionUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeToMaturity",
        type: "uint256",
      },
    ],
    name: "YieldSpace__TooFarFromMaturity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startingReservesFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newHTokenReservesFactor",
        type: "uint256",
      },
    ],
    name: "YieldSpace__UnderlyingOutForHTokenInReservesFactorsUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "normalizedUnderlyingReserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedUnderlyingIn",
        type: "uint256",
      },
    ],
    name: "YieldSpace__UnderlyingReservesOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "normalizedUnderlyingReserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedUnderlyingOut",
        type: "uint256",
      },
    ],
    name: "YieldSpace__UnderlyingReservesUnderflow",
    type: "error",
  },
] as const;

const _bytecode =
  "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080c000a";

type YieldSpaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldSpaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldSpace__factory extends ContractFactory {
  constructor(...args: YieldSpaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YieldSpace> {
    return super.deploy(overrides || {}) as Promise<YieldSpace>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): YieldSpace {
    return super.attach(address) as YieldSpace;
  }
  override connect(signer: Signer): YieldSpace__factory {
    return super.connect(signer) as YieldSpace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldSpaceInterface {
    return new utils.Interface(_abi) as YieldSpaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldSpace {
    return new Contract(address, _abi, signerOrProvider) as YieldSpace;
  }
}
