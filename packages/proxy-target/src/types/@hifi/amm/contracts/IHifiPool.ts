/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IHifiPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "buyHToken"
      | "buyUnderlying"
      | "decimals"
      | "decreaseAllowance"
      | "getBurnOutputs"
      | "getMintInputs"
      | "getNormalizedUnderlyingReserves"
      | "getQuoteForBuyingHToken"
      | "getQuoteForBuyingUnderlying"
      | "getQuoteForSellingHToken"
      | "getQuoteForSellingUnderlying"
      | "getVirtualHTokenReserves"
      | "hToken"
      | "increaseAllowance"
      | "maturity"
      | "mint"
      | "name"
      | "nonces"
      | "permit"
      | "sellHToken"
      | "sellUnderlying"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "underlying"
      | "underlyingPrecisionScalar"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquidity"
      | "Approval"
      | "RemoveLiquidity"
      | "Trade"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buyHToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyUnderlying",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnOutputs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintInputs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedUnderlyingReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteForBuyingHToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteForBuyingUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteForSellingHToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteForSellingUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualHTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlying",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingPrecisionScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnOutputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedUnderlyingReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteForBuyingHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteForBuyingUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteForSellingHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteForSellingUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualHTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingPrecisionScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    provider: AddressLike,
    underlyingAmount: BigNumberish,
    hTokenAmount: BigNumberish,
    poolTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    provider: string,
    underlyingAmount: bigint,
    hTokenAmount: bigint,
    poolTokenAmount: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    provider: string;
    underlyingAmount: bigint;
    hTokenAmount: bigint;
    poolTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    provider: AddressLike,
    underlyingAmount: BigNumberish,
    hTokenAmount: BigNumberish,
    poolTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    provider: string,
    underlyingAmount: bigint,
    hTokenAmount: bigint,
    poolTokenAmount: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    provider: string;
    underlyingAmount: bigint;
    hTokenAmount: bigint;
    poolTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    underlyingAmount: BigNumberish,
    hTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    from: string,
    to: string,
    underlyingAmount: bigint,
    hTokenAmount: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    from: string;
    to: string;
    underlyingAmount: bigint;
    hTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHifiPool extends BaseContract {
  connect(runner?: ContractRunner | null): IHifiPool;
  waitForDeployment(): Promise<this>;

  interface: IHifiPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [poolTokensBurned: BigNumberish],
    [[bigint, bigint] & { underlyingReturned: bigint; hTokenReturned: bigint }],
    "nonpayable"
  >;

  buyHToken: TypedContractMethod<
    [to: AddressLike, hTokenOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  buyUnderlying: TypedContractMethod<
    [to: AddressLike, underlyingOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getBurnOutputs: TypedContractMethod<
    [poolTokensBurned: BigNumberish],
    [[bigint, bigint] & { underlyingReturned: bigint; hTokenReturned: bigint }],
    "view"
  >;

  getMintInputs: TypedContractMethod<
    [underlyingOffered: BigNumberish],
    [[bigint, bigint] & { hTokenRequired: bigint; poolTokensMinted: bigint }],
    "view"
  >;

  getNormalizedUnderlyingReserves: TypedContractMethod<[], [bigint], "view">;

  getQuoteForBuyingHToken: TypedContractMethod<
    [hTokenOut: BigNumberish],
    [bigint],
    "view"
  >;

  getQuoteForBuyingUnderlying: TypedContractMethod<
    [underlyingOut: BigNumberish],
    [bigint],
    "view"
  >;

  getQuoteForSellingHToken: TypedContractMethod<
    [hTokenIn: BigNumberish],
    [bigint],
    "view"
  >;

  getQuoteForSellingUnderlying: TypedContractMethod<
    [underlyingIn: BigNumberish],
    [bigint],
    "view"
  >;

  getVirtualHTokenReserves: TypedContractMethod<[], [bigint], "view">;

  hToken: TypedContractMethod<[], [string], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  maturity: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [underlyingOffered: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sellHToken: TypedContractMethod<
    [to: AddressLike, hTokenIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  sellUnderlying: TypedContractMethod<
    [to: AddressLike, underlyingIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  underlyingPrecisionScalar: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [poolTokensBurned: BigNumberish],
    [[bigint, bigint] & { underlyingReturned: bigint; hTokenReturned: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyHToken"
  ): TypedContractMethod<
    [to: AddressLike, hTokenOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyUnderlying"
  ): TypedContractMethod<
    [to: AddressLike, underlyingOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBurnOutputs"
  ): TypedContractMethod<
    [poolTokensBurned: BigNumberish],
    [[bigint, bigint] & { underlyingReturned: bigint; hTokenReturned: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMintInputs"
  ): TypedContractMethod<
    [underlyingOffered: BigNumberish],
    [[bigint, bigint] & { hTokenRequired: bigint; poolTokensMinted: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNormalizedUnderlyingReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuoteForBuyingHToken"
  ): TypedContractMethod<[hTokenOut: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuoteForBuyingUnderlying"
  ): TypedContractMethod<[underlyingOut: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuoteForSellingHToken"
  ): TypedContractMethod<[hTokenIn: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuoteForSellingUnderlying"
  ): TypedContractMethod<[underlyingIn: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVirtualHTokenReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedAmount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maturity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [underlyingOffered: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellHToken"
  ): TypedContractMethod<
    [to: AddressLike, hTokenIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellUnderlying"
  ): TypedContractMethod<
    [to: AddressLike, underlyingIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingPrecisionScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AddLiquidity(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "RemoveLiquidity(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "Trade(uint256,address,address,int256,int256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
