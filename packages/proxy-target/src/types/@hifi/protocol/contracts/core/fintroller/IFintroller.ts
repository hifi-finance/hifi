/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace IFintroller {
  export type BondStruct = {
    debtCeiling: PromiseOrValue<BigNumberish>;
    isBorrowAllowed: PromiseOrValue<boolean>;
    isDepositUnderlyingAllowed: PromiseOrValue<boolean>;
    isLiquidateBorrowAllowed: PromiseOrValue<boolean>;
    isListed: PromiseOrValue<boolean>;
    isRepayBorrowAllowed: PromiseOrValue<boolean>;
  };

  export type BondStructOutput = [
    BigNumber,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    debtCeiling: BigNumber;
    isBorrowAllowed: boolean;
    isDepositUnderlyingAllowed: boolean;
    isLiquidateBorrowAllowed: boolean;
    isListed: boolean;
    isRepayBorrowAllowed: boolean;
  };

  export type CollateralStruct = {
    ceiling: PromiseOrValue<BigNumberish>;
    ratio: PromiseOrValue<BigNumberish>;
    liquidationIncentive: PromiseOrValue<BigNumberish>;
    isDepositCollateralAllowed: PromiseOrValue<boolean>;
    isListed: PromiseOrValue<boolean>;
  };

  export type CollateralStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    ceiling: BigNumber;
    ratio: BigNumber;
    liquidationIncentive: BigNumber;
    isDepositCollateralAllowed: boolean;
    isListed: boolean;
  };
}

export interface IFintrollerInterface extends utils.Interface {
  functions: {
    "_renounceOwnership()": FunctionFragment;
    "_transferOwnership(address)": FunctionFragment;
    "getBond(address)": FunctionFragment;
    "getBorrowAllowed(address)": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "getCollateralCeiling(address)": FunctionFragment;
    "getCollateralRatio(address)": FunctionFragment;
    "getDebtCeiling(address)": FunctionFragment;
    "getDepositCollateralAllowed(address)": FunctionFragment;
    "getDepositUnderlyingAllowed(address)": FunctionFragment;
    "getLiquidateBorrowAllowed(address)": FunctionFragment;
    "getLiquidationIncentive(address)": FunctionFragment;
    "getRepayBorrowAllowed(address)": FunctionFragment;
    "isBondListed(address)": FunctionFragment;
    "isCollateralListed(address)": FunctionFragment;
    "listBond(address)": FunctionFragment;
    "listCollateral(address)": FunctionFragment;
    "maxBonds()": FunctionFragment;
    "maxCollaterals()": FunctionFragment;
    "owner()": FunctionFragment;
    "setBorrowAllowed(address,bool)": FunctionFragment;
    "setCollateralCeiling(address,uint256)": FunctionFragment;
    "setCollateralRatio(address,uint256)": FunctionFragment;
    "setDebtCeiling(address,uint256)": FunctionFragment;
    "setDepositCollateralAllowed(address,bool)": FunctionFragment;
    "setDepositUnderlyingAllowed(address,bool)": FunctionFragment;
    "setLiquidateBorrowAllowed(address,bool)": FunctionFragment;
    "setLiquidationIncentive(address,uint256)": FunctionFragment;
    "setMaxBonds(uint256)": FunctionFragment;
    "setMaxCollaterals(uint256)": FunctionFragment;
    "setRepayBorrowAllowed(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_renounceOwnership"
      | "_transferOwnership"
      | "getBond"
      | "getBorrowAllowed"
      | "getCollateral"
      | "getCollateralCeiling"
      | "getCollateralRatio"
      | "getDebtCeiling"
      | "getDepositCollateralAllowed"
      | "getDepositUnderlyingAllowed"
      | "getLiquidateBorrowAllowed"
      | "getLiquidationIncentive"
      | "getRepayBorrowAllowed"
      | "isBondListed"
      | "isCollateralListed"
      | "listBond"
      | "listCollateral"
      | "maxBonds"
      | "maxCollaterals"
      | "owner"
      | "setBorrowAllowed"
      | "setCollateralCeiling"
      | "setCollateralRatio"
      | "setDebtCeiling"
      | "setDepositCollateralAllowed"
      | "setDepositUnderlyingAllowed"
      | "setLiquidateBorrowAllowed"
      | "setLiquidationIncentive"
      | "setMaxBonds"
      | "setMaxCollaterals"
      | "setRepayBorrowAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBond",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCeiling",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCollateralAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositUnderlyingAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateBorrowAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationIncentive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayBorrowAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBondListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listBond",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "maxBonds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxCollaterals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBorrowAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralCeiling",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositCollateralAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositUnderlyingAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateBorrowAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBonds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCollaterals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRepayBorrowAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositUnderlyingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBondListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositUnderlyingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRepayBorrowAllowed",
    data: BytesLike
  ): Result;

  events: {
    "ListBond(address,address)": EventFragment;
    "ListCollateral(address,address)": EventFragment;
    "SetBorrowAllowed(address,address,bool)": EventFragment;
    "SetCollateralCeiling(address,address,uint256,uint256)": EventFragment;
    "SetCollateralRatio(address,address,uint256,uint256)": EventFragment;
    "SetDebtCeiling(address,address,uint256,uint256)": EventFragment;
    "SetDepositCollateralAllowed(address,address,bool)": EventFragment;
    "SetDepositUnderlyingAllowed(address,address,bool)": EventFragment;
    "SetLiquidateBorrowAllowed(address,address,bool)": EventFragment;
    "SetLiquidationIncentive(address,address,uint256,uint256)": EventFragment;
    "SetMaxBonds(address,uint256,uint256)": EventFragment;
    "SetMaxCollaterals(address,uint256,uint256)": EventFragment;
    "SetRepayBorrowAllowed(address,address,bool)": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ListBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralCeiling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDebtCeiling"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDepositCollateralAllowed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDepositUnderlyingAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidateBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxCollaterals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRepayBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export interface ListBondEventObject {
  owner: string;
  bond: string;
}
export type ListBondEvent = TypedEvent<[string, string], ListBondEventObject>;

export type ListBondEventFilter = TypedEventFilter<ListBondEvent>;

export interface ListCollateralEventObject {
  owner: string;
  collateral: string;
}
export type ListCollateralEvent = TypedEvent<
  [string, string],
  ListCollateralEventObject
>;

export type ListCollateralEventFilter = TypedEventFilter<ListCollateralEvent>;

export interface SetBorrowAllowedEventObject {
  owner: string;
  bond: string;
  state: boolean;
}
export type SetBorrowAllowedEvent = TypedEvent<
  [string, string, boolean],
  SetBorrowAllowedEventObject
>;

export type SetBorrowAllowedEventFilter =
  TypedEventFilter<SetBorrowAllowedEvent>;

export interface SetCollateralCeilingEventObject {
  owner: string;
  collateral: string;
  oldCollateralCeiling: BigNumber;
  newCollateralCeiling: BigNumber;
}
export type SetCollateralCeilingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SetCollateralCeilingEventObject
>;

export type SetCollateralCeilingEventFilter =
  TypedEventFilter<SetCollateralCeilingEvent>;

export interface SetCollateralRatioEventObject {
  owner: string;
  collateral: string;
  oldCollateralRatio: BigNumber;
  newCollateralRatio: BigNumber;
}
export type SetCollateralRatioEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SetCollateralRatioEventObject
>;

export type SetCollateralRatioEventFilter =
  TypedEventFilter<SetCollateralRatioEvent>;

export interface SetDebtCeilingEventObject {
  owner: string;
  bond: string;
  oldDebtCeiling: BigNumber;
  newDebtCeiling: BigNumber;
}
export type SetDebtCeilingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SetDebtCeilingEventObject
>;

export type SetDebtCeilingEventFilter = TypedEventFilter<SetDebtCeilingEvent>;

export interface SetDepositCollateralAllowedEventObject {
  owner: string;
  collateral: string;
  state: boolean;
}
export type SetDepositCollateralAllowedEvent = TypedEvent<
  [string, string, boolean],
  SetDepositCollateralAllowedEventObject
>;

export type SetDepositCollateralAllowedEventFilter =
  TypedEventFilter<SetDepositCollateralAllowedEvent>;

export interface SetDepositUnderlyingAllowedEventObject {
  owner: string;
  bond: string;
  state: boolean;
}
export type SetDepositUnderlyingAllowedEvent = TypedEvent<
  [string, string, boolean],
  SetDepositUnderlyingAllowedEventObject
>;

export type SetDepositUnderlyingAllowedEventFilter =
  TypedEventFilter<SetDepositUnderlyingAllowedEvent>;

export interface SetLiquidateBorrowAllowedEventObject {
  owner: string;
  bond: string;
  state: boolean;
}
export type SetLiquidateBorrowAllowedEvent = TypedEvent<
  [string, string, boolean],
  SetLiquidateBorrowAllowedEventObject
>;

export type SetLiquidateBorrowAllowedEventFilter =
  TypedEventFilter<SetLiquidateBorrowAllowedEvent>;

export interface SetLiquidationIncentiveEventObject {
  owner: string;
  collateral: string;
  oldLiquidationIncentive: BigNumber;
  newLiquidationIncentive: BigNumber;
}
export type SetLiquidationIncentiveEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SetLiquidationIncentiveEventObject
>;

export type SetLiquidationIncentiveEventFilter =
  TypedEventFilter<SetLiquidationIncentiveEvent>;

export interface SetMaxBondsEventObject {
  owner: string;
  oldMaxBonds: BigNumber;
  newMaxBonds: BigNumber;
}
export type SetMaxBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetMaxBondsEventObject
>;

export type SetMaxBondsEventFilter = TypedEventFilter<SetMaxBondsEvent>;

export interface SetMaxCollateralsEventObject {
  owner: string;
  oldMaxCollaterals: BigNumber;
  newMaxCollaterals: BigNumber;
}
export type SetMaxCollateralsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetMaxCollateralsEventObject
>;

export type SetMaxCollateralsEventFilter =
  TypedEventFilter<SetMaxCollateralsEvent>;

export interface SetRepayBorrowAllowedEventObject {
  owner: string;
  bond: string;
  state: boolean;
}
export type SetRepayBorrowAllowedEvent = TypedEvent<
  [string, string, boolean],
  SetRepayBorrowAllowedEventObject
>;

export type SetRepayBorrowAllowedEventFilter =
  TypedEventFilter<SetRepayBorrowAllowedEvent>;

export interface TransferOwnershipEventObject {
  oldOwner: string;
  newOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string, string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface IFintroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFintrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBond(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IFintroller.BondStructOutput]>;

    getBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IFintroller.CollateralStructOutput]>;

    getCollateralCeiling(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateralRatio(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebtCeiling(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBondListed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollateralListed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listBond(
      bond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxBonds(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCollaterals(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralCeiling(
      collateral: PromiseOrValue<string>,
      newCollateralCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralRatio(
      collateral: PromiseOrValue<string>,
      newCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDebtCeiling(
      bond: PromiseOrValue<string>,
      newDebtCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBonds(
      newMaxBonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCollaterals(
      newMaxCollaterals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBond(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFintroller.BondStructOutput>;

  getBorrowAllowed(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCollateral(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFintroller.CollateralStructOutput>;

  getCollateralCeiling(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralRatio(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtCeiling(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositCollateralAllowed(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDepositUnderlyingAllowed(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidateBorrowAllowed(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidationIncentive(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepayBorrowAllowed(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBondListed(
    bond: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollateralListed(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listBond(
    bond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listCollateral(
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxBonds(overrides?: CallOverrides): Promise<BigNumber>;

  maxCollaterals(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setBorrowAllowed(
    bond: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralCeiling(
    collateral: PromiseOrValue<string>,
    newCollateralCeiling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralRatio(
    collateral: PromiseOrValue<string>,
    newCollateralRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDebtCeiling(
    bond: PromiseOrValue<string>,
    newDebtCeiling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositCollateralAllowed(
    collateral: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositUnderlyingAllowed(
    bond: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidateBorrowAllowed(
    bond: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationIncentive(
    collateral: PromiseOrValue<string>,
    newLiquidationIncentive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBonds(
    newMaxBonds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCollaterals(
    newMaxCollaterals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRepayBorrowAllowed(
    bond: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _renounceOwnership(overrides?: CallOverrides): Promise<void>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBond(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFintroller.BondStructOutput>;

    getBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFintroller.CollateralStructOutput>;

    getCollateralCeiling(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralRatio(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBondListed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollateralListed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listBond(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBonds(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollaterals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralCeiling(
      collateral: PromiseOrValue<string>,
      newCollateralCeiling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralRatio(
      collateral: PromiseOrValue<string>,
      newCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtCeiling(
      bond: PromiseOrValue<string>,
      newDebtCeiling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBonds(
      newMaxBonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCollaterals(
      newMaxCollaterals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ListBond(address,address)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null
    ): ListBondEventFilter;
    ListBond(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null
    ): ListBondEventFilter;

    "ListCollateral(address,address)"(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): ListCollateralEventFilter;
    ListCollateral(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): ListCollateralEventFilter;

    "SetBorrowAllowed(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetBorrowAllowedEventFilter;
    SetBorrowAllowed(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetBorrowAllowedEventFilter;

    "SetCollateralCeiling(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oldCollateralCeiling?: null,
      newCollateralCeiling?: null
    ): SetCollateralCeilingEventFilter;
    SetCollateralCeiling(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oldCollateralCeiling?: null,
      newCollateralCeiling?: null
    ): SetCollateralCeilingEventFilter;

    "SetCollateralRatio(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oldCollateralRatio?: null,
      newCollateralRatio?: null
    ): SetCollateralRatioEventFilter;
    SetCollateralRatio(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oldCollateralRatio?: null,
      newCollateralRatio?: null
    ): SetCollateralRatioEventFilter;

    "SetDebtCeiling(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): SetDebtCeilingEventFilter;
    SetDebtCeiling(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): SetDebtCeilingEventFilter;

    "SetDepositCollateralAllowed(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      state?: null
    ): SetDepositCollateralAllowedEventFilter;
    SetDepositCollateralAllowed(
      owner?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      state?: null
    ): SetDepositCollateralAllowedEventFilter;

    "SetDepositUnderlyingAllowed(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetDepositUnderlyingAllowedEventFilter;
    SetDepositUnderlyingAllowed(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetDepositUnderlyingAllowedEventFilter;

    "SetLiquidateBorrowAllowed(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetLiquidateBorrowAllowedEventFilter;
    SetLiquidateBorrowAllowed(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetLiquidateBorrowAllowedEventFilter;

    "SetLiquidationIncentive(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      collateral?: null,
      oldLiquidationIncentive?: null,
      newLiquidationIncentive?: null
    ): SetLiquidationIncentiveEventFilter;
    SetLiquidationIncentive(
      owner?: PromiseOrValue<string> | null,
      collateral?: null,
      oldLiquidationIncentive?: null,
      newLiquidationIncentive?: null
    ): SetLiquidationIncentiveEventFilter;

    "SetMaxBonds(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      oldMaxBonds?: null,
      newMaxBonds?: null
    ): SetMaxBondsEventFilter;
    SetMaxBonds(
      owner?: PromiseOrValue<string> | null,
      oldMaxBonds?: null,
      newMaxBonds?: null
    ): SetMaxBondsEventFilter;

    "SetMaxCollaterals(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      oldMaxCollaterals?: null,
      newMaxCollaterals?: null
    ): SetMaxCollateralsEventFilter;
    SetMaxCollaterals(
      owner?: PromiseOrValue<string> | null,
      oldMaxCollaterals?: null,
      newMaxCollaterals?: null
    ): SetMaxCollateralsEventFilter;

    "SetRepayBorrowAllowed(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetRepayBorrowAllowedEventFilter;
    SetRepayBorrowAllowed(
      owner?: PromiseOrValue<string> | null,
      bond?: PromiseOrValue<string> | null,
      state?: null
    ): SetRepayBorrowAllowedEventFilter;

    "TransferOwnership(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): TransferOwnershipEventFilter;
    TransferOwnership(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): TransferOwnershipEventFilter;
  };

  estimateGas: {
    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBond(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralCeiling(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralRatio(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBondListed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralListed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBond(
      bond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxBonds(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollaterals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralCeiling(
      collateral: PromiseOrValue<string>,
      newCollateralCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralRatio(
      collateral: PromiseOrValue<string>,
      newCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDebtCeiling(
      bond: PromiseOrValue<string>,
      newDebtCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBonds(
      newMaxBonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCollaterals(
      newMaxCollaterals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBond(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralCeiling(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralRatio(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtCeiling(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBondListed(
      bond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralListed(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listBond(
      bond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxCollaterals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralCeiling(
      collateral: PromiseOrValue<string>,
      newCollateralCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralRatio(
      collateral: PromiseOrValue<string>,
      newCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDebtCeiling(
      bond: PromiseOrValue<string>,
      newDebtCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositCollateralAllowed(
      collateral: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositUnderlyingAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidateBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationIncentive(
      collateral: PromiseOrValue<string>,
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBonds(
      newMaxBonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCollaterals(
      newMaxCollaterals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRepayBorrowAllowed(
      bond: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
