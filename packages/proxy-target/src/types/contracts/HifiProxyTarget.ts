/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface HifiProxyTargetInterface extends utils.Interface {
  functions: {
    "borrowHTokenAndBuyUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "buyHTokenAndRepayBorrow(address,address,uint256,uint256)": FunctionFragment;
    "buyHTokenAndRepayBorrowWithSignature(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "depositCollateral(address,address,uint256)": FunctionFragment;
    "depositCollateralWithSignature(address,address,uint256,uint256,bytes)": FunctionFragment;
    "depositUnderlyingAndMintHTokenAndAddLiquidity(address,uint256,uint256)": FunctionFragment;
    "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "depositUnderlyingAndRepayBorrow(address,address,uint256)": FunctionFragment;
    "depositUnderlyingAndRepayBorrowWithSignature(address,address,uint256,uint256,bytes)": FunctionFragment;
    "redeem(address,uint256,uint256)": FunctionFragment;
    "redeemWithSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "removeLiquidity(address,uint256)": FunctionFragment;
    "removeLiquidityAndRedeem(address,uint256)": FunctionFragment;
    "removeLiquidityAndRedeemWithSignature(address,uint256,uint256,bytes)": FunctionFragment;
    "removeLiquidityAndWithdrawUnderlying(address,uint256,uint256)": FunctionFragment;
    "removeLiquidityAndWithdrawUnderlyingWithSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "removeLiquidityWithSignature(address,uint256,uint256,bytes)": FunctionFragment;
    "sellHToken(address,uint256,uint256)": FunctionFragment;
    "sellHTokenWithSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "sellUnderlying(address,uint256,uint256)": FunctionFragment;
    "sellUnderlyingAndRepayBorrow(address,address,uint256,uint256)": FunctionFragment;
    "sellUnderlyingAndRepayBorrowWithSignature(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "sellUnderlyingWithSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "withdrawCollateral(address,address,uint256)": FunctionFragment;
    "withdrawCollateralAndUnwrapWeth(address,address,uint256)": FunctionFragment;
    "wrapEthAndDepositCollateral(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowHTokenAndBuyUnderlying"
      | "buyHTokenAndRepayBorrow"
      | "buyHTokenAndRepayBorrowWithSignature"
      | "depositCollateral"
      | "depositCollateralWithSignature"
      | "depositUnderlyingAndMintHTokenAndAddLiquidity"
      | "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature"
      | "depositUnderlyingAndRepayBorrow"
      | "depositUnderlyingAndRepayBorrowWithSignature"
      | "redeem"
      | "redeemWithSignature"
      | "removeLiquidity"
      | "removeLiquidityAndRedeem"
      | "removeLiquidityAndRedeemWithSignature"
      | "removeLiquidityAndWithdrawUnderlying"
      | "removeLiquidityAndWithdrawUnderlyingWithSignature"
      | "removeLiquidityWithSignature"
      | "sellHToken"
      | "sellHTokenWithSignature"
      | "sellUnderlying"
      | "sellUnderlyingAndRepayBorrow"
      | "sellUnderlyingAndRepayBorrowWithSignature"
      | "sellUnderlyingWithSignature"
      | "withdrawCollateral"
      | "withdrawCollateralAndUnwrapWeth"
      | "wrapEthAndDepositCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndRepayBorrow",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndRepayBorrowWithSignature",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralWithSignature",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndRepayBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndRepayBorrowWithSignature",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRedeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRedeemWithSignature",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndWithdrawUnderlying",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndWithdrawUnderlyingWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithSignature",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHTokenWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlying",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingAndRepayBorrowWithSignature",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingWithSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateralAndUnwrapWeth",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapEthAndDepositCollateral",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRedeemWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndWithdrawUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndWithdrawUnderlyingWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellHTokenWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateralAndUnwrapWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapEthAndDepositCollateral",
    data: BytesLike
  ): Result;

  events: {
    "BorrowHTokenAndBuyUnderlying(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BorrowHTokenAndBuyUnderlying"
  ): EventFragment;
}

export interface BorrowHTokenAndBuyUnderlyingEventObject {
  borrower: string;
  borrowAmount: BigNumber;
  underlyingAmount: BigNumber;
}
export type BorrowHTokenAndBuyUnderlyingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BorrowHTokenAndBuyUnderlyingEventObject
>;

export type BorrowHTokenAndBuyUnderlyingEventFilter =
  TypedEventFilter<BorrowHTokenAndBuyUnderlyingEvent>;

export interface HifiProxyTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HifiProxyTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHTokenAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateralWithSignature(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingAndMintHTokenAndAddLiquidity(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingAndRepayBorrowWithSignature(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemWithSignature(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndRedeem(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndRedeemWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndWithdrawUnderlying(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndWithdrawUnderlyingWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellHTokenWithSignature(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlyingAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlyingWithSignature(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateralAndUnwrapWeth(
      weth: string,
      balanceSheet: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowHTokenAndBuyUnderlying(
    balanceSheet: string,
    hifiPool: string,
    maxBorrowAmount: BigNumberish,
    underlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHTokenAndRepayBorrow(
    hifiPool: string,
    balanceSheet: string,
    maxUnderlyingIn: BigNumberish,
    hTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHTokenAndRepayBorrowWithSignature(
    hifiPool: string,
    balanceSheet: string,
    maxUnderlyingIn: BigNumberish,
    hTokenOut: BigNumberish,
    deadline: BigNumberish,
    signatureUnderlying: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    balanceSheet: string,
    collateral: string,
    depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateralWithSignature(
    balanceSheet: string,
    collateral: string,
    depositAmount: BigNumberish,
    deadline: BigNumberish,
    signatureCollateral: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingAndMintHTokenAndAddLiquidity(
    hifiPool: string,
    depositAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(
    hifiPool: string,
    depositAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    deadline: BigNumberish,
    signatureUnderlying: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingAndRepayBorrow(
    hToken: string,
    balanceSheet: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingAndRepayBorrowWithSignature(
    hToken: string,
    balanceSheet: string,
    underlyingAmount: BigNumberish,
    deadline: BigNumberish,
    signatureUnderlying: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    hToken: string,
    hTokenAmount: BigNumberish,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemWithSignature(
    hToken: string,
    hTokenAmount: BigNumberish,
    underlyingAmount: BigNumberish,
    deadline: BigNumberish,
    signatureHToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndRedeem(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndRedeemWithSignature(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    deadline: BigNumberish,
    signatureLPToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndWithdrawUnderlying(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndWithdrawUnderlyingWithSignature(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    withdrawAmount: BigNumberish,
    deadline: BigNumberish,
    signatureLPToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityWithSignature(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    deadline: BigNumberish,
    signatureLPToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellHToken(
    hifiPool: string,
    hTokenIn: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellHTokenWithSignature(
    hifiPool: string,
    hTokenIn: BigNumberish,
    minUnderlyingOut: BigNumberish,
    deadline: BigNumberish,
    signatureHToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlying(
    hifiPool: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlyingAndRepayBorrow(
    hifiPool: string,
    balanceSheet: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlyingAndRepayBorrowWithSignature(
    hifiPool: string,
    balanceSheet: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    deadline: BigNumberish,
    signatureUnderlying: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlyingWithSignature(
    hifiPool: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    deadline: BigNumberish,
    signatureUnderlying: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    balanceSheet: string,
    collateral: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateralAndUnwrapWeth(
    weth: string,
    balanceSheet: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapEthAndDepositCollateral(
    weth: string,
    balanceSheet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyHTokenAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralWithSignature(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUnderlyingAndMintHTokenAndAddLiquidity(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUnderlyingAndRepayBorrowWithSignature(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemWithSignature(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndRedeem(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndRedeemWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndWithdrawUnderlying(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndWithdrawUnderlyingWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellHTokenWithSignature(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlyingAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlyingWithSignature(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateralAndUnwrapWeth(
      weth: string,
      balanceSheet: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowHTokenAndBuyUnderlying(address,uint256,uint256)"(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): BorrowHTokenAndBuyUnderlyingEventFilter;
    BorrowHTokenAndBuyUnderlying(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): BorrowHTokenAndBuyUnderlyingEventFilter;
  };

  estimateGas: {
    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHTokenAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateralWithSignature(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlyingAndMintHTokenAndAddLiquidity(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlyingAndRepayBorrowWithSignature(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemWithSignature(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndRedeem(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndRedeemWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndWithdrawUnderlying(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndWithdrawUnderlyingWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellHTokenWithSignature(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlyingAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlyingWithSignature(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateralAndUnwrapWeth(
      weth: string,
      balanceSheet: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHTokenAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralWithSignature(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingAndMintHTokenAndAddLiquidity(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature(
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingAndRepayBorrowWithSignature(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemWithSignature(
      hToken: string,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndRedeem(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndRedeemWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndWithdrawUnderlying(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndWithdrawUnderlyingWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithSignature(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellHTokenWithSignature(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlyingAndRepayBorrowWithSignature(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlyingWithSignature(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateralAndUnwrapWeth(
      weth: string,
      balanceSheet: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
