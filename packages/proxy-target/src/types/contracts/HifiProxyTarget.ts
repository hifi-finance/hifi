/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HifiProxyTargetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrowHTokenAndBuyUnderlying"
      | "buyHTokenAndRepayBorrow"
      | "buyHTokenAndRepayBorrowWithSignature"
      | "depositCollateral"
      | "depositCollateralWithSignature"
      | "depositUnderlyingAndMintHTokenAndAddLiquidity"
      | "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature"
      | "depositUnderlyingAndRepayBorrow"
      | "depositUnderlyingAndRepayBorrowWithSignature"
      | "redeem"
      | "redeemWithSignature"
      | "removeLiquidity"
      | "removeLiquidityAndRedeem"
      | "removeLiquidityAndRedeemWithSignature"
      | "removeLiquidityAndWithdrawUnderlying"
      | "removeLiquidityAndWithdrawUnderlyingWithSignature"
      | "removeLiquidityWithSignature"
      | "sellHToken"
      | "sellHTokenWithSignature"
      | "sellUnderlying"
      | "sellUnderlyingAndRepayBorrow"
      | "sellUnderlyingAndRepayBorrowWithSignature"
      | "sellUnderlyingWithSignature"
      | "withdrawCollateral"
      | "withdrawCollateralAndUnwrapWeth"
      | "wrapEthAndDepositCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BorrowHTokenAndBuyUnderlying"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndRepayBorrow",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndRepayBorrowWithSignature",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralWithSignature",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndRepayBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAndRepayBorrowWithSignature",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRedeem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRedeemWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndWithdrawUnderlying",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndWithdrawUnderlyingWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHToken",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHTokenWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlying",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingAndRepayBorrowWithSignature",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingWithSignature",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateralAndUnwrapWeth",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapEthAndDepositCollateral",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRedeemWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndWithdrawUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndWithdrawUnderlyingWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellHTokenWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingAndRepayBorrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateralAndUnwrapWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapEthAndDepositCollateral",
    data: BytesLike
  ): Result;
}

export namespace BorrowHTokenAndBuyUnderlyingEvent {
  export type InputTuple = [
    borrower: AddressLike,
    borrowAmount: BigNumberish,
    underlyingAmount: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    borrowAmount: bigint,
    underlyingAmount: bigint
  ];
  export interface OutputObject {
    borrower: string;
    borrowAmount: bigint;
    underlyingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HifiProxyTarget extends BaseContract {
  connect(runner?: ContractRunner | null): HifiProxyTarget;
  waitForDeployment(): Promise<this>;

  interface: HifiProxyTargetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrowHTokenAndBuyUnderlying: TypedContractMethod<
    [
      balanceSheet: AddressLike,
      hifiPool: AddressLike,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buyHTokenAndRepayBorrow: TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buyHTokenAndRepayBorrowWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      depositAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositCollateralWithSignature: TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  depositUnderlyingAndMintHTokenAndAddLiquidity: TypedContractMethod<
    [
      hifiPool: AddressLike,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  depositUnderlyingAndRepayBorrow: TypedContractMethod<
    [
      hToken: AddressLike,
      balanceSheet: AddressLike,
      underlyingAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositUnderlyingAndRepayBorrowWithSignature: TypedContractMethod<
    [
      hToken: AddressLike,
      balanceSheet: AddressLike,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [
      hToken: AddressLike,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  redeemWithSignature: TypedContractMethod<
    [
      hToken: AddressLike,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<
    [hifiPool: AddressLike, poolTokensBurned: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeLiquidityAndRedeem: TypedContractMethod<
    [hifiPool: AddressLike, poolTokensBurned: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeLiquidityAndRedeemWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityAndWithdrawUnderlying: TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityAndWithdrawUnderlyingWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sellHToken: TypedContractMethod<
    [
      hifiPool: AddressLike,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sellHTokenWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sellUnderlying: TypedContractMethod<
    [
      hifiPool: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sellUnderlyingAndRepayBorrow: TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sellUnderlyingAndRepayBorrowWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sellUnderlyingWithSignature: TypedContractMethod<
    [
      hifiPool: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawCollateralAndUnwrapWeth: TypedContractMethod<
    [
      weth: AddressLike,
      balanceSheet: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  wrapEthAndDepositCollateral: TypedContractMethod<
    [weth: AddressLike, balanceSheet: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrowHTokenAndBuyUnderlying"
  ): TypedContractMethod<
    [
      balanceSheet: AddressLike,
      hifiPool: AddressLike,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyHTokenAndRepayBorrow"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyHTokenAndRepayBorrowWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      depositAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateralWithSignature"
  ): TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      depositAmount: BigNumberish,
      deadline: BigNumberish,
      signatureCollateral: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositUnderlyingAndMintHTokenAndAddLiquidity"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositUnderlyingAndMintHTokenAndAddLiquidityWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositUnderlyingAndRepayBorrow"
  ): TypedContractMethod<
    [
      hToken: AddressLike,
      balanceSheet: AddressLike,
      underlyingAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositUnderlyingAndRepayBorrowWithSignature"
  ): TypedContractMethod<
    [
      hToken: AddressLike,
      balanceSheet: AddressLike,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [
      hToken: AddressLike,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemWithSignature"
  ): TypedContractMethod<
    [
      hToken: AddressLike,
      hTokenAmount: BigNumberish,
      underlyingAmount: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [hifiPool: AddressLike, poolTokensBurned: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityAndRedeem"
  ): TypedContractMethod<
    [hifiPool: AddressLike, poolTokensBurned: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityAndRedeemWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityAndWithdrawUnderlying"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityAndWithdrawUnderlyingWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      withdrawAmount: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      poolTokensBurned: BigNumberish,
      deadline: BigNumberish,
      signatureLPToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellHToken"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellHTokenWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      deadline: BigNumberish,
      signatureHToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellUnderlying"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellUnderlyingAndRepayBorrow"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellUnderlyingAndRepayBorrowWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      balanceSheet: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellUnderlyingWithSignature"
  ): TypedContractMethod<
    [
      hifiPool: AddressLike,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      deadline: BigNumberish,
      signatureUnderlying: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      balanceSheet: AddressLike,
      collateral: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateralAndUnwrapWeth"
  ): TypedContractMethod<
    [
      weth: AddressLike,
      balanceSheet: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrapEthAndDepositCollateral"
  ): TypedContractMethod<
    [weth: AddressLike, balanceSheet: AddressLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "BorrowHTokenAndBuyUnderlying"
  ): TypedContractEvent<
    BorrowHTokenAndBuyUnderlyingEvent.InputTuple,
    BorrowHTokenAndBuyUnderlyingEvent.OutputTuple,
    BorrowHTokenAndBuyUnderlyingEvent.OutputObject
  >;

  filters: {
    "BorrowHTokenAndBuyUnderlying(address,uint256,uint256)": TypedContractEvent<
      BorrowHTokenAndBuyUnderlyingEvent.InputTuple,
      BorrowHTokenAndBuyUnderlyingEvent.OutputTuple,
      BorrowHTokenAndBuyUnderlyingEvent.OutputObject
    >;
    BorrowHTokenAndBuyUnderlying: TypedContractEvent<
      BorrowHTokenAndBuyUnderlyingEvent.InputTuple,
      BorrowHTokenAndBuyUnderlyingEvent.OutputTuple,
      BorrowHTokenAndBuyUnderlyingEvent.OutputObject
    >;
  };
}
