/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChainlinkOperatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_renounceOwnership"
      | "_transferOwnership"
      | "deleteFeed"
      | "getFeed"
      | "getNormalizedPrice"
      | "getPrice"
      | "owner"
      | "pricePrecision"
      | "pricePrecisionScalar"
      | "priceStalenessThreshold"
      | "setFeed"
      | "setPriceStalenessThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeleteFeed"
      | "SetFeed"
      | "SetPriceStalenessThreshold"
      | "TransferOwnership"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deleteFeed", values: [string]): string;
  encodeFunctionData(functionFragment: "getFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNormalizedPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePrecisionScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceStalenessThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceStalenessThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecisionScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceStalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceStalenessThreshold",
    data: BytesLike
  ): Result;
}

export namespace DeleteFeedEvent {
  export type InputTuple = [asset: AddressLike, feed: AddressLike];
  export type OutputTuple = [asset: string, feed: string];
  export interface OutputObject {
    asset: string;
    feed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeedEvent {
  export type InputTuple = [asset: AddressLike, feed: AddressLike];
  export type OutputTuple = [asset: string, feed: string];
  export interface OutputObject {
    asset: string;
    feed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPriceStalenessThresholdEvent {
  export type InputTuple = [
    oldPriceStalenessThreshold: BigNumberish,
    newPriceStalenessThreshold: BigNumberish
  ];
  export type OutputTuple = [
    oldPriceStalenessThreshold: bigint,
    newPriceStalenessThreshold: bigint
  ];
  export interface OutputObject {
    oldPriceStalenessThreshold: bigint;
    newPriceStalenessThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferOwnershipEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainlinkOperator extends BaseContract {
  connect(runner?: ContractRunner | null): ChainlinkOperator;
  waitForDeployment(): Promise<this>;

  interface: ChainlinkOperatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  _transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteFeed: TypedContractMethod<[symbol: string], [void], "nonpayable">;

  getFeed: TypedContractMethod<
    [symbol: string],
    [[string, string, boolean]],
    "view"
  >;

  getNormalizedPrice: TypedContractMethod<[symbol: string], [bigint], "view">;

  getPrice: TypedContractMethod<[symbol: string], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pricePrecision: TypedContractMethod<[], [bigint], "view">;

  pricePrecisionScalar: TypedContractMethod<[], [bigint], "view">;

  priceStalenessThreshold: TypedContractMethod<[], [bigint], "view">;

  setFeed: TypedContractMethod<
    [asset: AddressLike, feed: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceStalenessThreshold: TypedContractMethod<
    [newPriceStalenessThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteFeed"
  ): TypedContractMethod<[symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFeed"
  ): TypedContractMethod<[symbol: string], [[string, string, boolean]], "view">;
  getFunction(
    nameOrSignature: "getNormalizedPrice"
  ): TypedContractMethod<[symbol: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[symbol: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricePrecision"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pricePrecisionScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceStalenessThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFeed"
  ): TypedContractMethod<
    [asset: AddressLike, feed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceStalenessThreshold"
  ): TypedContractMethod<
    [newPriceStalenessThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DeleteFeed"
  ): TypedContractEvent<
    DeleteFeedEvent.InputTuple,
    DeleteFeedEvent.OutputTuple,
    DeleteFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetFeed"
  ): TypedContractEvent<
    SetFeedEvent.InputTuple,
    SetFeedEvent.OutputTuple,
    SetFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetPriceStalenessThreshold"
  ): TypedContractEvent<
    SetPriceStalenessThresholdEvent.InputTuple,
    SetPriceStalenessThresholdEvent.OutputTuple,
    SetPriceStalenessThresholdEvent.OutputObject
  >;
  getEvent(
    key: "TransferOwnership"
  ): TypedContractEvent<
    TransferOwnershipEvent.InputTuple,
    TransferOwnershipEvent.OutputTuple,
    TransferOwnershipEvent.OutputObject
  >;

  filters: {
    "DeleteFeed(address,address)": TypedContractEvent<
      DeleteFeedEvent.InputTuple,
      DeleteFeedEvent.OutputTuple,
      DeleteFeedEvent.OutputObject
    >;
    DeleteFeed: TypedContractEvent<
      DeleteFeedEvent.InputTuple,
      DeleteFeedEvent.OutputTuple,
      DeleteFeedEvent.OutputObject
    >;

    "SetFeed(address,address)": TypedContractEvent<
      SetFeedEvent.InputTuple,
      SetFeedEvent.OutputTuple,
      SetFeedEvent.OutputObject
    >;
    SetFeed: TypedContractEvent<
      SetFeedEvent.InputTuple,
      SetFeedEvent.OutputTuple,
      SetFeedEvent.OutputObject
    >;

    "SetPriceStalenessThreshold(uint256,uint256)": TypedContractEvent<
      SetPriceStalenessThresholdEvent.InputTuple,
      SetPriceStalenessThresholdEvent.OutputTuple,
      SetPriceStalenessThresholdEvent.OutputObject
    >;
    SetPriceStalenessThreshold: TypedContractEvent<
      SetPriceStalenessThresholdEvent.InputTuple,
      SetPriceStalenessThresholdEvent.OutputTuple,
      SetPriceStalenessThresholdEvent.OutputObject
    >;

    "TransferOwnership(address,address)": TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
    TransferOwnership: TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
  };
}
