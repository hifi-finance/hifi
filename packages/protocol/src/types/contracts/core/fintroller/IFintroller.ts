/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFintroller {
  export type BondStruct = {
    debtCeiling: BigNumberish;
    isBorrowAllowed: boolean;
    isDepositUnderlyingAllowed: boolean;
    isLiquidateBorrowAllowed: boolean;
    isListed: boolean;
    isRepayBorrowAllowed: boolean;
  };

  export type BondStructOutput = [
    debtCeiling: bigint,
    isBorrowAllowed: boolean,
    isDepositUnderlyingAllowed: boolean,
    isLiquidateBorrowAllowed: boolean,
    isListed: boolean,
    isRepayBorrowAllowed: boolean
  ] & {
    debtCeiling: bigint;
    isBorrowAllowed: boolean;
    isDepositUnderlyingAllowed: boolean;
    isLiquidateBorrowAllowed: boolean;
    isListed: boolean;
    isRepayBorrowAllowed: boolean;
  };

  export type CollateralStruct = {
    ceiling: BigNumberish;
    ratio: BigNumberish;
    liquidationIncentive: BigNumberish;
    isDepositCollateralAllowed: boolean;
    isListed: boolean;
  };

  export type CollateralStructOutput = [
    ceiling: bigint,
    ratio: bigint,
    liquidationIncentive: bigint,
    isDepositCollateralAllowed: boolean,
    isListed: boolean
  ] & {
    ceiling: bigint;
    ratio: bigint;
    liquidationIncentive: bigint;
    isDepositCollateralAllowed: boolean;
    isListed: boolean;
  };
}

export interface IFintrollerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_renounceOwnership"
      | "_transferOwnership"
      | "getBond"
      | "getBorrowAllowed"
      | "getCollateral"
      | "getCollateralCeiling"
      | "getCollateralRatio"
      | "getDebtCeiling"
      | "getDepositCollateralAllowed"
      | "getDepositUnderlyingAllowed"
      | "getLiquidateBorrowAllowed"
      | "getLiquidationIncentive"
      | "getRepayBorrowAllowed"
      | "isBondListed"
      | "isCollateralListed"
      | "listBond"
      | "listCollateral"
      | "maxBonds"
      | "maxCollaterals"
      | "owner"
      | "setBorrowAllowed"
      | "setCollateralCeiling"
      | "setCollateralRatio"
      | "setDebtCeiling"
      | "setDepositCollateralAllowed"
      | "setDepositUnderlyingAllowed"
      | "setLiquidateBorrowAllowed"
      | "setLiquidationIncentive"
      | "setMaxBonds"
      | "setMaxCollaterals"
      | "setRepayBorrowAllowed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ListBond"
      | "ListCollateral"
      | "SetBorrowAllowed"
      | "SetCollateralCeiling"
      | "SetCollateralRatio"
      | "SetDebtCeiling"
      | "SetDepositCollateralAllowed"
      | "SetDepositUnderlyingAllowed"
      | "SetLiquidateBorrowAllowed"
      | "SetLiquidationIncentive"
      | "SetMaxBonds"
      | "SetMaxCollaterals"
      | "SetRepayBorrowAllowed"
      | "TransferOwnership"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBond",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCeiling",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralRatio",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCollateralAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositUnderlyingAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateBorrowAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationIncentive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayBorrowAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBondListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listBond",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maxBonds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxCollaterals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBorrowAllowed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralCeiling",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRatio",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositCollateralAllowed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositUnderlyingAllowed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateBorrowAllowed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCollaterals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRepayBorrowAllowed",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositUnderlyingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBondListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositUnderlyingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRepayBorrowAllowed",
    data: BytesLike
  ): Result;
}

export namespace ListBondEvent {
  export type InputTuple = [owner: AddressLike, bond: AddressLike];
  export type OutputTuple = [owner: string, bond: string];
  export interface OutputObject {
    owner: string;
    bond: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListCollateralEvent {
  export type InputTuple = [owner: AddressLike, collateral: AddressLike];
  export type OutputTuple = [owner: string, collateral: string];
  export interface OutputObject {
    owner: string;
    collateral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBorrowAllowedEvent {
  export type InputTuple = [
    owner: AddressLike,
    bond: AddressLike,
    state: boolean
  ];
  export type OutputTuple = [owner: string, bond: string, state: boolean];
  export interface OutputObject {
    owner: string;
    bond: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCollateralCeilingEvent {
  export type InputTuple = [
    owner: AddressLike,
    collateral: AddressLike,
    oldCollateralCeiling: BigNumberish,
    newCollateralCeiling: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    collateral: string,
    oldCollateralCeiling: bigint,
    newCollateralCeiling: bigint
  ];
  export interface OutputObject {
    owner: string;
    collateral: string;
    oldCollateralCeiling: bigint;
    newCollateralCeiling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCollateralRatioEvent {
  export type InputTuple = [
    owner: AddressLike,
    collateral: AddressLike,
    oldCollateralRatio: BigNumberish,
    newCollateralRatio: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    collateral: string,
    oldCollateralRatio: bigint,
    newCollateralRatio: bigint
  ];
  export interface OutputObject {
    owner: string;
    collateral: string;
    oldCollateralRatio: bigint;
    newCollateralRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDebtCeilingEvent {
  export type InputTuple = [
    owner: AddressLike,
    bond: AddressLike,
    oldDebtCeiling: BigNumberish,
    newDebtCeiling: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    bond: string,
    oldDebtCeiling: bigint,
    newDebtCeiling: bigint
  ];
  export interface OutputObject {
    owner: string;
    bond: string;
    oldDebtCeiling: bigint;
    newDebtCeiling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDepositCollateralAllowedEvent {
  export type InputTuple = [
    owner: AddressLike,
    collateral: AddressLike,
    state: boolean
  ];
  export type OutputTuple = [owner: string, collateral: string, state: boolean];
  export interface OutputObject {
    owner: string;
    collateral: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDepositUnderlyingAllowedEvent {
  export type InputTuple = [
    owner: AddressLike,
    bond: AddressLike,
    state: boolean
  ];
  export type OutputTuple = [owner: string, bond: string, state: boolean];
  export interface OutputObject {
    owner: string;
    bond: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLiquidateBorrowAllowedEvent {
  export type InputTuple = [
    owner: AddressLike,
    bond: AddressLike,
    state: boolean
  ];
  export type OutputTuple = [owner: string, bond: string, state: boolean];
  export interface OutputObject {
    owner: string;
    bond: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLiquidationIncentiveEvent {
  export type InputTuple = [
    owner: AddressLike,
    collateral: AddressLike,
    oldLiquidationIncentive: BigNumberish,
    newLiquidationIncentive: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    collateral: string,
    oldLiquidationIncentive: bigint,
    newLiquidationIncentive: bigint
  ];
  export interface OutputObject {
    owner: string;
    collateral: string;
    oldLiquidationIncentive: bigint;
    newLiquidationIncentive: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxBondsEvent {
  export type InputTuple = [
    owner: AddressLike,
    oldMaxBonds: BigNumberish,
    newMaxBonds: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    oldMaxBonds: bigint,
    newMaxBonds: bigint
  ];
  export interface OutputObject {
    owner: string;
    oldMaxBonds: bigint;
    newMaxBonds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxCollateralsEvent {
  export type InputTuple = [
    owner: AddressLike,
    oldMaxCollaterals: BigNumberish,
    newMaxCollaterals: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    oldMaxCollaterals: bigint,
    newMaxCollaterals: bigint
  ];
  export interface OutputObject {
    owner: string;
    oldMaxCollaterals: bigint;
    newMaxCollaterals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRepayBorrowAllowedEvent {
  export type InputTuple = [
    owner: AddressLike,
    bond: AddressLike,
    state: boolean
  ];
  export type OutputTuple = [owner: string, bond: string, state: boolean];
  export interface OutputObject {
    owner: string;
    bond: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferOwnershipEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFintroller extends BaseContract {
  connect(runner?: ContractRunner | null): IFintroller;
  waitForDeployment(): Promise<this>;

  interface: IFintrollerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  _transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getBond: TypedContractMethod<
    [bond: AddressLike],
    [IFintroller.BondStructOutput],
    "view"
  >;

  getBorrowAllowed: TypedContractMethod<[bond: AddressLike], [boolean], "view">;

  getCollateral: TypedContractMethod<
    [collateral: AddressLike],
    [IFintroller.CollateralStructOutput],
    "view"
  >;

  getCollateralCeiling: TypedContractMethod<
    [collateral: AddressLike],
    [bigint],
    "view"
  >;

  getCollateralRatio: TypedContractMethod<
    [collateral: AddressLike],
    [bigint],
    "view"
  >;

  getDebtCeiling: TypedContractMethod<[bond: AddressLike], [bigint], "view">;

  getDepositCollateralAllowed: TypedContractMethod<
    [collateral: AddressLike],
    [boolean],
    "view"
  >;

  getDepositUnderlyingAllowed: TypedContractMethod<
    [bond: AddressLike],
    [boolean],
    "view"
  >;

  getLiquidateBorrowAllowed: TypedContractMethod<
    [bond: AddressLike],
    [boolean],
    "view"
  >;

  getLiquidationIncentive: TypedContractMethod<
    [collateral: AddressLike],
    [bigint],
    "view"
  >;

  getRepayBorrowAllowed: TypedContractMethod<
    [bond: AddressLike],
    [boolean],
    "view"
  >;

  isBondListed: TypedContractMethod<[bond: AddressLike], [boolean], "view">;

  isCollateralListed: TypedContractMethod<
    [collateral: AddressLike],
    [boolean],
    "view"
  >;

  listBond: TypedContractMethod<[bond: AddressLike], [void], "nonpayable">;

  listCollateral: TypedContractMethod<
    [collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  maxBonds: TypedContractMethod<[], [bigint], "view">;

  maxCollaterals: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setBorrowAllowed: TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  setCollateralCeiling: TypedContractMethod<
    [collateral: AddressLike, newCollateralCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCollateralRatio: TypedContractMethod<
    [collateral: AddressLike, newCollateralRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDebtCeiling: TypedContractMethod<
    [bond: AddressLike, newDebtCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDepositCollateralAllowed: TypedContractMethod<
    [collateral: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  setDepositUnderlyingAllowed: TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  setLiquidateBorrowAllowed: TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  setLiquidationIncentive: TypedContractMethod<
    [collateral: AddressLike, newLiquidationIncentive: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxBonds: TypedContractMethod<
    [newMaxBonds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxCollaterals: TypedContractMethod<
    [newMaxCollaterals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRepayBorrowAllowed: TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBond"
  ): TypedContractMethod<
    [bond: AddressLike],
    [IFintroller.BondStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBorrowAllowed"
  ): TypedContractMethod<[bond: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCollateral"
  ): TypedContractMethod<
    [collateral: AddressLike],
    [IFintroller.CollateralStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralCeiling"
  ): TypedContractMethod<[collateral: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralRatio"
  ): TypedContractMethod<[collateral: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDebtCeiling"
  ): TypedContractMethod<[bond: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositCollateralAllowed"
  ): TypedContractMethod<[collateral: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDepositUnderlyingAllowed"
  ): TypedContractMethod<[bond: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLiquidateBorrowAllowed"
  ): TypedContractMethod<[bond: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLiquidationIncentive"
  ): TypedContractMethod<[collateral: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRepayBorrowAllowed"
  ): TypedContractMethod<[bond: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBondListed"
  ): TypedContractMethod<[bond: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCollateralListed"
  ): TypedContractMethod<[collateral: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listBond"
  ): TypedContractMethod<[bond: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listCollateral"
  ): TypedContractMethod<[collateral: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxBonds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCollaterals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBorrowAllowed"
  ): TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralCeiling"
  ): TypedContractMethod<
    [collateral: AddressLike, newCollateralCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralRatio"
  ): TypedContractMethod<
    [collateral: AddressLike, newCollateralRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDebtCeiling"
  ): TypedContractMethod<
    [bond: AddressLike, newDebtCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositCollateralAllowed"
  ): TypedContractMethod<
    [collateral: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositUnderlyingAllowed"
  ): TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidateBorrowAllowed"
  ): TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationIncentive"
  ): TypedContractMethod<
    [collateral: AddressLike, newLiquidationIncentive: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxBonds"
  ): TypedContractMethod<[newMaxBonds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxCollaterals"
  ): TypedContractMethod<
    [newMaxCollaterals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRepayBorrowAllowed"
  ): TypedContractMethod<
    [bond: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ListBond"
  ): TypedContractEvent<
    ListBondEvent.InputTuple,
    ListBondEvent.OutputTuple,
    ListBondEvent.OutputObject
  >;
  getEvent(
    key: "ListCollateral"
  ): TypedContractEvent<
    ListCollateralEvent.InputTuple,
    ListCollateralEvent.OutputTuple,
    ListCollateralEvent.OutputObject
  >;
  getEvent(
    key: "SetBorrowAllowed"
  ): TypedContractEvent<
    SetBorrowAllowedEvent.InputTuple,
    SetBorrowAllowedEvent.OutputTuple,
    SetBorrowAllowedEvent.OutputObject
  >;
  getEvent(
    key: "SetCollateralCeiling"
  ): TypedContractEvent<
    SetCollateralCeilingEvent.InputTuple,
    SetCollateralCeilingEvent.OutputTuple,
    SetCollateralCeilingEvent.OutputObject
  >;
  getEvent(
    key: "SetCollateralRatio"
  ): TypedContractEvent<
    SetCollateralRatioEvent.InputTuple,
    SetCollateralRatioEvent.OutputTuple,
    SetCollateralRatioEvent.OutputObject
  >;
  getEvent(
    key: "SetDebtCeiling"
  ): TypedContractEvent<
    SetDebtCeilingEvent.InputTuple,
    SetDebtCeilingEvent.OutputTuple,
    SetDebtCeilingEvent.OutputObject
  >;
  getEvent(
    key: "SetDepositCollateralAllowed"
  ): TypedContractEvent<
    SetDepositCollateralAllowedEvent.InputTuple,
    SetDepositCollateralAllowedEvent.OutputTuple,
    SetDepositCollateralAllowedEvent.OutputObject
  >;
  getEvent(
    key: "SetDepositUnderlyingAllowed"
  ): TypedContractEvent<
    SetDepositUnderlyingAllowedEvent.InputTuple,
    SetDepositUnderlyingAllowedEvent.OutputTuple,
    SetDepositUnderlyingAllowedEvent.OutputObject
  >;
  getEvent(
    key: "SetLiquidateBorrowAllowed"
  ): TypedContractEvent<
    SetLiquidateBorrowAllowedEvent.InputTuple,
    SetLiquidateBorrowAllowedEvent.OutputTuple,
    SetLiquidateBorrowAllowedEvent.OutputObject
  >;
  getEvent(
    key: "SetLiquidationIncentive"
  ): TypedContractEvent<
    SetLiquidationIncentiveEvent.InputTuple,
    SetLiquidationIncentiveEvent.OutputTuple,
    SetLiquidationIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxBonds"
  ): TypedContractEvent<
    SetMaxBondsEvent.InputTuple,
    SetMaxBondsEvent.OutputTuple,
    SetMaxBondsEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxCollaterals"
  ): TypedContractEvent<
    SetMaxCollateralsEvent.InputTuple,
    SetMaxCollateralsEvent.OutputTuple,
    SetMaxCollateralsEvent.OutputObject
  >;
  getEvent(
    key: "SetRepayBorrowAllowed"
  ): TypedContractEvent<
    SetRepayBorrowAllowedEvent.InputTuple,
    SetRepayBorrowAllowedEvent.OutputTuple,
    SetRepayBorrowAllowedEvent.OutputObject
  >;
  getEvent(
    key: "TransferOwnership"
  ): TypedContractEvent<
    TransferOwnershipEvent.InputTuple,
    TransferOwnershipEvent.OutputTuple,
    TransferOwnershipEvent.OutputObject
  >;

  filters: {
    "ListBond(address,address)": TypedContractEvent<
      ListBondEvent.InputTuple,
      ListBondEvent.OutputTuple,
      ListBondEvent.OutputObject
    >;
    ListBond: TypedContractEvent<
      ListBondEvent.InputTuple,
      ListBondEvent.OutputTuple,
      ListBondEvent.OutputObject
    >;

    "ListCollateral(address,address)": TypedContractEvent<
      ListCollateralEvent.InputTuple,
      ListCollateralEvent.OutputTuple,
      ListCollateralEvent.OutputObject
    >;
    ListCollateral: TypedContractEvent<
      ListCollateralEvent.InputTuple,
      ListCollateralEvent.OutputTuple,
      ListCollateralEvent.OutputObject
    >;

    "SetBorrowAllowed(address,address,bool)": TypedContractEvent<
      SetBorrowAllowedEvent.InputTuple,
      SetBorrowAllowedEvent.OutputTuple,
      SetBorrowAllowedEvent.OutputObject
    >;
    SetBorrowAllowed: TypedContractEvent<
      SetBorrowAllowedEvent.InputTuple,
      SetBorrowAllowedEvent.OutputTuple,
      SetBorrowAllowedEvent.OutputObject
    >;

    "SetCollateralCeiling(address,address,uint256,uint256)": TypedContractEvent<
      SetCollateralCeilingEvent.InputTuple,
      SetCollateralCeilingEvent.OutputTuple,
      SetCollateralCeilingEvent.OutputObject
    >;
    SetCollateralCeiling: TypedContractEvent<
      SetCollateralCeilingEvent.InputTuple,
      SetCollateralCeilingEvent.OutputTuple,
      SetCollateralCeilingEvent.OutputObject
    >;

    "SetCollateralRatio(address,address,uint256,uint256)": TypedContractEvent<
      SetCollateralRatioEvent.InputTuple,
      SetCollateralRatioEvent.OutputTuple,
      SetCollateralRatioEvent.OutputObject
    >;
    SetCollateralRatio: TypedContractEvent<
      SetCollateralRatioEvent.InputTuple,
      SetCollateralRatioEvent.OutputTuple,
      SetCollateralRatioEvent.OutputObject
    >;

    "SetDebtCeiling(address,address,uint256,uint256)": TypedContractEvent<
      SetDebtCeilingEvent.InputTuple,
      SetDebtCeilingEvent.OutputTuple,
      SetDebtCeilingEvent.OutputObject
    >;
    SetDebtCeiling: TypedContractEvent<
      SetDebtCeilingEvent.InputTuple,
      SetDebtCeilingEvent.OutputTuple,
      SetDebtCeilingEvent.OutputObject
    >;

    "SetDepositCollateralAllowed(address,address,bool)": TypedContractEvent<
      SetDepositCollateralAllowedEvent.InputTuple,
      SetDepositCollateralAllowedEvent.OutputTuple,
      SetDepositCollateralAllowedEvent.OutputObject
    >;
    SetDepositCollateralAllowed: TypedContractEvent<
      SetDepositCollateralAllowedEvent.InputTuple,
      SetDepositCollateralAllowedEvent.OutputTuple,
      SetDepositCollateralAllowedEvent.OutputObject
    >;

    "SetDepositUnderlyingAllowed(address,address,bool)": TypedContractEvent<
      SetDepositUnderlyingAllowedEvent.InputTuple,
      SetDepositUnderlyingAllowedEvent.OutputTuple,
      SetDepositUnderlyingAllowedEvent.OutputObject
    >;
    SetDepositUnderlyingAllowed: TypedContractEvent<
      SetDepositUnderlyingAllowedEvent.InputTuple,
      SetDepositUnderlyingAllowedEvent.OutputTuple,
      SetDepositUnderlyingAllowedEvent.OutputObject
    >;

    "SetLiquidateBorrowAllowed(address,address,bool)": TypedContractEvent<
      SetLiquidateBorrowAllowedEvent.InputTuple,
      SetLiquidateBorrowAllowedEvent.OutputTuple,
      SetLiquidateBorrowAllowedEvent.OutputObject
    >;
    SetLiquidateBorrowAllowed: TypedContractEvent<
      SetLiquidateBorrowAllowedEvent.InputTuple,
      SetLiquidateBorrowAllowedEvent.OutputTuple,
      SetLiquidateBorrowAllowedEvent.OutputObject
    >;

    "SetLiquidationIncentive(address,address,uint256,uint256)": TypedContractEvent<
      SetLiquidationIncentiveEvent.InputTuple,
      SetLiquidationIncentiveEvent.OutputTuple,
      SetLiquidationIncentiveEvent.OutputObject
    >;
    SetLiquidationIncentive: TypedContractEvent<
      SetLiquidationIncentiveEvent.InputTuple,
      SetLiquidationIncentiveEvent.OutputTuple,
      SetLiquidationIncentiveEvent.OutputObject
    >;

    "SetMaxBonds(address,uint256,uint256)": TypedContractEvent<
      SetMaxBondsEvent.InputTuple,
      SetMaxBondsEvent.OutputTuple,
      SetMaxBondsEvent.OutputObject
    >;
    SetMaxBonds: TypedContractEvent<
      SetMaxBondsEvent.InputTuple,
      SetMaxBondsEvent.OutputTuple,
      SetMaxBondsEvent.OutputObject
    >;

    "SetMaxCollaterals(address,uint256,uint256)": TypedContractEvent<
      SetMaxCollateralsEvent.InputTuple,
      SetMaxCollateralsEvent.OutputTuple,
      SetMaxCollateralsEvent.OutputObject
    >;
    SetMaxCollaterals: TypedContractEvent<
      SetMaxCollateralsEvent.InputTuple,
      SetMaxCollateralsEvent.OutputTuple,
      SetMaxCollateralsEvent.OutputObject
    >;

    "SetRepayBorrowAllowed(address,address,bool)": TypedContractEvent<
      SetRepayBorrowAllowedEvent.InputTuple,
      SetRepayBorrowAllowedEvent.OutputTuple,
      SetRepayBorrowAllowedEvent.OutputObject
    >;
    SetRepayBorrowAllowed: TypedContractEvent<
      SetRepayBorrowAllowedEvent.InputTuple,
      SetRepayBorrowAllowedEvent.OutputTuple,
      SetRepayBorrowAllowedEvent.OutputObject
    >;

    "TransferOwnership(address,address)": TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
    TransferOwnership: TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
  };
}
