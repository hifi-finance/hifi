/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IBalanceSheetV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "_renounceOwnership"
      | "_transferOwnership"
      | "borrow"
      | "depositCollateral"
      | "getBondList"
      | "getCollateralAmount"
      | "getCollateralList"
      | "getCurrentAccountLiquidity"
      | "getDebtAmount"
      | "getHypotheticalAccountLiquidity"
      | "getRepayAmount"
      | "getSeizableCollateralAmount"
      | "liquidateBorrow"
      | "owner"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "setFintroller"
      | "setOracle"
      | "withdrawCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrow"
      | "DepositCollateral"
      | "LiquidateBorrow"
      | "RepayBorrow"
      | "SetFintroller"
      | "SetOracle"
      | "TransferOwnership"
      | "WithdrawCollateral"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAccountLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtAmount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayAmount",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeizableCollateralAmount",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFintroller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeizableCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFintroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    account: AddressLike,
    bond: AddressLike,
    borrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    bond: string,
    borrowAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    bond: string;
    borrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositCollateralEvent {
  export type InputTuple = [
    account: AddressLike,
    collateral: AddressLike,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    collateral: string,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    collateral: string;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    bond: AddressLike,
    repayAmount: BigNumberish,
    collateral: AddressLike,
    seizedCollateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    bond: string,
    repayAmount: bigint,
    collateral: string,
    seizedCollateralAmount: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    bond: string;
    repayAmount: bigint;
    collateral: string;
    seizedCollateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    bond: AddressLike,
    repayAmount: BigNumberish,
    newDebtAmount: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    bond: string,
    repayAmount: bigint,
    newDebtAmount: bigint
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    bond: string;
    repayAmount: bigint;
    newDebtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFintrollerEvent {
  export type InputTuple = [
    owner: AddressLike,
    oldFintroller: AddressLike,
    newFintroller: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    oldFintroller: string,
    newFintroller: string
  ];
  export interface OutputObject {
    owner: string;
    oldFintroller: string;
    newFintroller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleEvent {
  export type InputTuple = [
    owner: AddressLike,
    oldOracle: AddressLike,
    newOracle: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    oldOracle: string,
    newOracle: string
  ];
  export interface OutputObject {
    owner: string;
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferOwnershipEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCollateralEvent {
  export type InputTuple = [
    account: AddressLike,
    collateral: AddressLike,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    collateral: string,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    collateral: string;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBalanceSheetV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IBalanceSheetV2;
  waitForDeployment(): Promise<this>;

  interface: IBalanceSheetV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  _transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [bond: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<
    [collateral: AddressLike, depositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBondList: TypedContractMethod<[account: AddressLike], [string[]], "view">;

  getCollateralAmount: TypedContractMethod<
    [account: AddressLike, collateral: AddressLike],
    [bigint],
    "view"
  >;

  getCollateralList: TypedContractMethod<
    [account: AddressLike],
    [string[]],
    "view"
  >;

  getCurrentAccountLiquidity: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint] & { excessLiquidity: bigint; shortfallLiquidity: bigint }
    ],
    "view"
  >;

  getDebtAmount: TypedContractMethod<
    [account: AddressLike, bond: AddressLike],
    [bigint],
    "view"
  >;

  getHypotheticalAccountLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      collateralModify: AddressLike,
      collateralAmountModify: BigNumberish,
      bondModify: AddressLike,
      debtAmountModify: BigNumberish
    ],
    [
      [bigint, bigint] & { excessLiquidity: bigint; shortfallLiquidity: bigint }
    ],
    "view"
  >;

  getRepayAmount: TypedContractMethod<
    [
      collateral: AddressLike,
      seizableCollateralAmount: BigNumberish,
      bond: AddressLike
    ],
    [bigint],
    "view"
  >;

  getSeizableCollateralAmount: TypedContractMethod<
    [bond: AddressLike, repayAmount: BigNumberish, collateral: AddressLike],
    [bigint],
    "view"
  >;

  liquidateBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      bond: AddressLike,
      repayAmount: BigNumberish,
      collateral: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  repayBorrow: TypedContractMethod<
    [bond: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayBorrowBehalf: TypedContractMethod<
    [borrower: AddressLike, bond: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFintroller: TypedContractMethod<
    [newFintroller: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [collateral: AddressLike, withdrawAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [bond: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [collateral: AddressLike, depositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBondList"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCollateralAmount"
  ): TypedContractMethod<
    [account: AddressLike, collateral: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralList"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentAccountLiquidity"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint] & { excessLiquidity: bigint; shortfallLiquidity: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDebtAmount"
  ): TypedContractMethod<
    [account: AddressLike, bond: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHypotheticalAccountLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      collateralModify: AddressLike,
      collateralAmountModify: BigNumberish,
      bondModify: AddressLike,
      debtAmountModify: BigNumberish
    ],
    [
      [bigint, bigint] & { excessLiquidity: bigint; shortfallLiquidity: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRepayAmount"
  ): TypedContractMethod<
    [
      collateral: AddressLike,
      seizableCollateralAmount: BigNumberish,
      bond: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSeizableCollateralAmount"
  ): TypedContractMethod<
    [bond: AddressLike, repayAmount: BigNumberish, collateral: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidateBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      bond: AddressLike,
      repayAmount: BigNumberish,
      collateral: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repayBorrow"
  ): TypedContractMethod<
    [bond: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowBehalf"
  ): TypedContractMethod<
    [borrower: AddressLike, bond: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFintroller"
  ): TypedContractMethod<[newFintroller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [collateral: AddressLike, withdrawAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "DepositCollateral"
  ): TypedContractEvent<
    DepositCollateralEvent.InputTuple,
    DepositCollateralEvent.OutputTuple,
    DepositCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateBorrow"
  ): TypedContractEvent<
    LiquidateBorrowEvent.InputTuple,
    LiquidateBorrowEvent.OutputTuple,
    LiquidateBorrowEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "SetFintroller"
  ): TypedContractEvent<
    SetFintrollerEvent.InputTuple,
    SetFintrollerEvent.OutputTuple,
    SetFintrollerEvent.OutputObject
  >;
  getEvent(
    key: "SetOracle"
  ): TypedContractEvent<
    SetOracleEvent.InputTuple,
    SetOracleEvent.OutputTuple,
    SetOracleEvent.OutputObject
  >;
  getEvent(
    key: "TransferOwnership"
  ): TypedContractEvent<
    TransferOwnershipEvent.InputTuple,
    TransferOwnershipEvent.OutputTuple,
    TransferOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCollateral"
  ): TypedContractEvent<
    WithdrawCollateralEvent.InputTuple,
    WithdrawCollateralEvent.OutputTuple,
    WithdrawCollateralEvent.OutputObject
  >;

  filters: {
    "Borrow(address,address,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "DepositCollateral(address,address,uint256)": TypedContractEvent<
      DepositCollateralEvent.InputTuple,
      DepositCollateralEvent.OutputTuple,
      DepositCollateralEvent.OutputObject
    >;
    DepositCollateral: TypedContractEvent<
      DepositCollateralEvent.InputTuple,
      DepositCollateralEvent.OutputTuple,
      DepositCollateralEvent.OutputObject
    >;

    "LiquidateBorrow(address,address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;
    LiquidateBorrow: TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;

    "RepayBorrow(address,address,address,uint256,uint256)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "SetFintroller(address,address,address)": TypedContractEvent<
      SetFintrollerEvent.InputTuple,
      SetFintrollerEvent.OutputTuple,
      SetFintrollerEvent.OutputObject
    >;
    SetFintroller: TypedContractEvent<
      SetFintrollerEvent.InputTuple,
      SetFintrollerEvent.OutputTuple,
      SetFintrollerEvent.OutputObject
    >;

    "SetOracle(address,address,address)": TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;
    SetOracle: TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;

    "TransferOwnership(address,address)": TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
    TransferOwnership: TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;

    "WithdrawCollateral(address,address,uint256)": TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
    WithdrawCollateral: TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
  };
}
