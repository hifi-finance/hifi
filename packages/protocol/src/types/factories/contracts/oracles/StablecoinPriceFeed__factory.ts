/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  StablecoinPriceFeed,
  StablecoinPriceFeedInterface,
} from "../../../contracts/oracles/StablecoinPriceFeed";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "price_",
        type: "int256",
      },
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId_",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104d93803806104d983398101604081905261002f916100fe565b6080829052805161004790600090602084019061004f565b505050610216565b82805461005b906101db565b90600052602060002090601f01602090048101928261007d57600085556100c3565b82601f1061009657805160ff19168380011785556100c3565b828001600101855582156100c3579182015b828111156100c35782518255916020019190600101906100a8565b506100cf9291506100d3565b5090565b5b808211156100cf57600081556001016100d4565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561011157600080fd5b8251602080850151919350906001600160401b038082111561013257600080fd5b818601915086601f83011261014657600080fd5b815181811115610158576101586100e8565b604051601f8201601f19908116603f01168101908382118183101715610180576101806100e8565b81604052828152898684870101111561019857600080fd5b600093505b828410156101ba578484018601518185018701529285019261019d565b828411156101cb5760008684830101525b8096505050505050509250929050565b600181811c908216806101ef57607f821691505b6020821081141561021057634e487b7160e01b600052602260045260246000fd5b50919050565b6080516102a26102376000396000818160b5015261011901526102a26000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637284e416116100505780637284e4161461008f5780639a6fc8f5146100a4578063feaf968c1461011557600080fd5b8063313ce5671461006c57806354fd4d5014610080575b600080fd5b604051600881526020015b60405180910390f35b60405160018152602001610077565b610097610140565b60405161007791906101d2565b6100de6100b2366004610227565b907f00000000000000000000000000000000000000000000000000000000000000009060009081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610077565b60007f00000000000000000000000000000000000000000000000000000000000000008142816100de565b60606000805461014f9061025a565b80601f016020809104026020016040519081016040528092919081815260200182805461017b9061025a565b80156101c85780601f1061019d576101008083540402835291602001916101c8565b820191906000526020600020905b8154815290600101906020018083116101ab57829003601f168201915b5050505050905090565b600060208083528351808285015260005b818110156101ff578581018301518582016040015282016101e3565b81811115610211576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561023957600080fd5b813569ffffffffffffffffffff8116811461025357600080fd5b9392505050565b600181811c9082168061026e57607f821691505b6020821081141561028f57634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c634300080c000a";

type StablecoinPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StablecoinPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StablecoinPriceFeed__factory extends ContractFactory {
  constructor(...args: StablecoinPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    price_: BigNumberish,
    description_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StablecoinPriceFeed> {
    return super.deploy(
      price_,
      description_,
      overrides || {}
    ) as Promise<StablecoinPriceFeed>;
  }
  override getDeployTransaction(
    price_: BigNumberish,
    description_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(price_, description_, overrides || {});
  }
  override attach(address: string): StablecoinPriceFeed {
    return super.attach(address) as StablecoinPriceFeed;
  }
  override connect(signer: Signer): StablecoinPriceFeed__factory {
    return super.connect(signer) as StablecoinPriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StablecoinPriceFeedInterface {
    return new utils.Interface(_abi) as StablecoinPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StablecoinPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as StablecoinPriceFeed;
  }
}
