/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ChainlinkOperatorInterface extends utils.Interface {
  functions: {
    "_renounceOwnership()": FunctionFragment;
    "_transferOwnership(address)": FunctionFragment;
    "deleteFeed(string)": FunctionFragment;
    "getFeed(string)": FunctionFragment;
    "getNormalizedPrice(string)": FunctionFragment;
    "getPrice(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pricePrecision()": FunctionFragment;
    "pricePrecisionScalar()": FunctionFragment;
    "priceStalenessThreshold()": FunctionFragment;
    "setFeed(address,address)": FunctionFragment;
    "setPriceStalenessThreshold(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_renounceOwnership"
      | "_transferOwnership"
      | "deleteFeed"
      | "getFeed"
      | "getNormalizedPrice"
      | "getPrice"
      | "owner"
      | "pricePrecision"
      | "pricePrecisionScalar"
      | "priceStalenessThreshold"
      | "setFeed"
      | "setPriceStalenessThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deleteFeed", values: [string]): string;
  encodeFunctionData(functionFragment: "getFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNormalizedPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePrecisionScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceStalenessThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceStalenessThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecisionScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceStalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceStalenessThreshold",
    data: BytesLike
  ): Result;

  events: {
    "DeleteFeed(address,address)": EventFragment;
    "SetFeed(address,address)": EventFragment;
    "SetPriceStalenessThreshold(uint256,uint256)": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeleteFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceStalenessThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export interface DeleteFeedEventObject {
  asset: string;
  feed: string;
}
export type DeleteFeedEvent = TypedEvent<
  [string, string],
  DeleteFeedEventObject
>;

export type DeleteFeedEventFilter = TypedEventFilter<DeleteFeedEvent>;

export interface SetFeedEventObject {
  asset: string;
  feed: string;
}
export type SetFeedEvent = TypedEvent<[string, string], SetFeedEventObject>;

export type SetFeedEventFilter = TypedEventFilter<SetFeedEvent>;

export interface SetPriceStalenessThresholdEventObject {
  oldPriceStalenessThreshold: BigNumber;
  newPriceStalenessThreshold: BigNumber;
}
export type SetPriceStalenessThresholdEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetPriceStalenessThresholdEventObject
>;

export type SetPriceStalenessThresholdEventFilter =
  TypedEventFilter<SetPriceStalenessThresholdEvent>;

export interface TransferOwnershipEventObject {
  oldOwner: string;
  newOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string, string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface ChainlinkOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceStalenessThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceStalenessThreshold(
      newPriceStalenessThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFeed(
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeed(
    symbol: string,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getNormalizedPrice(
    symbol: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

  pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

  priceStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  setFeed(
    asset: string,
    feed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceStalenessThreshold(
    newPriceStalenessThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _renounceOwnership(overrides?: CallOverrides): Promise<void>;

    _transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteFeed(symbol: string, overrides?: CallOverrides): Promise<void>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

    priceStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceStalenessThreshold(
      newPriceStalenessThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeleteFeed(address,address)"(
      asset?: string | null,
      feed?: string | null
    ): DeleteFeedEventFilter;
    DeleteFeed(
      asset?: string | null,
      feed?: string | null
    ): DeleteFeedEventFilter;

    "SetFeed(address,address)"(
      asset?: string | null,
      feed?: string | null
    ): SetFeedEventFilter;
    SetFeed(asset?: string | null, feed?: string | null): SetFeedEventFilter;

    "SetPriceStalenessThreshold(uint256,uint256)"(
      oldPriceStalenessThreshold?: null,
      newPriceStalenessThreshold?: null
    ): SetPriceStalenessThresholdEventFilter;
    SetPriceStalenessThreshold(
      oldPriceStalenessThreshold?: null,
      newPriceStalenessThreshold?: null
    ): SetPriceStalenessThresholdEventFilter;

    "TransferOwnership(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TransferOwnershipEventFilter;
    TransferOwnership(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TransferOwnershipEventFilter;
  };

  estimateGas: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeed(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

    priceStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceStalenessThreshold(
      newPriceStalenessThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePrecisionScalar(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceStalenessThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceStalenessThreshold(
      newPriceStalenessThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
