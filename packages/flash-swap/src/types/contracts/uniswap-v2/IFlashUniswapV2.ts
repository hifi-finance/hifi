/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFlashUniswapV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceSheet"
      | "getRepayAmount"
      | "uniV2Factory"
      | "uniV2PairInitCodeHash"
      | "uniswapV2Call"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FlashSwapAndLiquidateBorrow"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceSheet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayAmount",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2PairInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Call",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceSheet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2PairInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Call",
    data: BytesLike
  ): Result;
}

export namespace FlashSwapAndLiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    bond: AddressLike,
    underlyingAmount: BigNumberish,
    seizeAmount: BigNumberish,
    repayAmount: BigNumberish,
    subsidyAmount: BigNumberish,
    profitAmount: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    bond: string,
    underlyingAmount: bigint,
    seizeAmount: bigint,
    repayAmount: bigint,
    subsidyAmount: bigint,
    profitAmount: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    bond: string;
    underlyingAmount: bigint;
    seizeAmount: bigint;
    repayAmount: bigint;
    subsidyAmount: bigint;
    profitAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFlashUniswapV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IFlashUniswapV2;
  waitForDeployment(): Promise<this>;

  interface: IFlashUniswapV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceSheet: TypedContractMethod<[], [string], "view">;

  getRepayAmount: TypedContractMethod<
    [
      pair: AddressLike,
      underlying: AddressLike,
      underlyingAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  uniV2Factory: TypedContractMethod<[], [string], "view">;

  uniV2PairInitCodeHash: TypedContractMethod<[], [string], "view">;

  uniswapV2Call: TypedContractMethod<
    [
      sender: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceSheet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRepayAmount"
  ): TypedContractMethod<
    [
      pair: AddressLike,
      underlying: AddressLike,
      underlyingAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "uniV2Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniV2PairInitCodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Call"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FlashSwapAndLiquidateBorrow"
  ): TypedContractEvent<
    FlashSwapAndLiquidateBorrowEvent.InputTuple,
    FlashSwapAndLiquidateBorrowEvent.OutputTuple,
    FlashSwapAndLiquidateBorrowEvent.OutputObject
  >;

  filters: {
    "FlashSwapAndLiquidateBorrow(address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FlashSwapAndLiquidateBorrowEvent.InputTuple,
      FlashSwapAndLiquidateBorrowEvent.OutputTuple,
      FlashSwapAndLiquidateBorrowEvent.OutputObject
    >;
    FlashSwapAndLiquidateBorrow: TypedContractEvent<
      FlashSwapAndLiquidateBorrowEvent.InputTuple,
      FlashSwapAndLiquidateBorrowEvent.OutputTuple,
      FlashSwapAndLiquidateBorrowEvent.OutputObject
    >;
  };
}
