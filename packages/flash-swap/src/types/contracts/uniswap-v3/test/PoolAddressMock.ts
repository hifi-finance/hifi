/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace PoolAddressMock {
  export type PoolKeyStruct = {
    token0: string;
    token1: string;
    fee: BigNumberish;
  };

  export type PoolKeyStructOutput = [string, string, number] & {
    token0: string;
    token1: string;
    fee: number;
  };
}

export interface PoolAddressMockInterface extends utils.Interface {
  functions: {
    "computeAddress(address,(address,address,uint24))": FunctionFragment;
    "getPoolKey(address,address,uint24)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "computeAddress" | "getPoolKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [string, PoolAddressMock.PoolKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolKey",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolKey", data: BytesLike): Result;

  events: {};
}

export interface PoolAddressMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolAddressMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeAddress(
      factory: string,
      key: PoolAddressMock.PoolKeyStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    getPoolKey(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PoolAddressMock.PoolKeyStructOutput]>;
  };

  computeAddress(
    factory: string,
    key: PoolAddressMock.PoolKeyStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolKey(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PoolAddressMock.PoolKeyStructOutput>;

  callStatic: {
    computeAddress(
      factory: string,
      key: PoolAddressMock.PoolKeyStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolKey(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PoolAddressMock.PoolKeyStructOutput>;
  };

  filters: {};

  estimateGas: {
    computeAddress(
      factory: string,
      key: PoolAddressMock.PoolKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolKey(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeAddress(
      factory: string,
      key: PoolAddressMock.PoolKeyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolKey(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
