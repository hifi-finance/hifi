/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IFlashUniswapV3 {
  export type FlashLiquidateParamsStruct = {
    borrower: string;
    bond: string;
    collateral: string;
    flashPoolFee: BigNumberish;
    sellPoolFee: BigNumberish;
    turnout: BigNumberish;
    underlyingAmount: BigNumberish;
  };

  export type FlashLiquidateParamsStructOutput = [
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    borrower: string;
    bond: string;
    collateral: string;
    flashPoolFee: number;
    sellPoolFee: number;
    turnout: BigNumber;
    underlyingAmount: BigNumber;
  };
}

export interface IFlashUniswapV3Interface extends utils.Interface {
  functions: {
    "balanceSheet()": FunctionFragment;
    "flashLiquidate((address,address,address,uint24,uint24,int256,uint256))": FunctionFragment;
    "uniV3Factory()": FunctionFragment;
    "uniV3Quoter()": FunctionFragment;
    "uniV3SwapRouter()": FunctionFragment;
    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceSheet"
      | "flashLiquidate"
      | "uniV3Factory"
      | "uniV3Quoter"
      | "uniV3SwapRouter"
      | "uniswapV3FlashCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceSheet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLiquidate",
    values: [IFlashUniswapV3.FlashLiquidateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "uniV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV3Quoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV3SwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceSheet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV3Quoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV3SwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;

  events: {
    "FlashLoanAndLiquidateBorrow(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FlashLoanAndLiquidateBorrow"
  ): EventFragment;
}

export interface FlashLoanAndLiquidateBorrowEventObject {
  liquidator: string;
  borrower: string;
  bond: string;
  underlyingAmount: BigNumber;
  seizeAmount: BigNumber;
  sellAmount: BigNumber;
  repayAmount: BigNumber;
  subsidyAmount: BigNumber;
  profitAmount: BigNumber;
}
export type FlashLoanAndLiquidateBorrowEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FlashLoanAndLiquidateBorrowEventObject
>;

export type FlashLoanAndLiquidateBorrowEventFilter =
  TypedEventFilter<FlashLoanAndLiquidateBorrowEvent>;

export interface IFlashUniswapV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlashUniswapV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceSheet(overrides?: CallOverrides): Promise<[string]>;

    flashLiquidate(
      params: IFlashUniswapV3.FlashLiquidateParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniV3Factory(overrides?: CallOverrides): Promise<[string]>;

    uniV3Quoter(overrides?: CallOverrides): Promise<[string]>;

    uniV3SwapRouter(overrides?: CallOverrides): Promise<[string]>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceSheet(overrides?: CallOverrides): Promise<string>;

  flashLiquidate(
    params: IFlashUniswapV3.FlashLiquidateParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniV3Factory(overrides?: CallOverrides): Promise<string>;

  uniV3Quoter(overrides?: CallOverrides): Promise<string>;

  uniV3SwapRouter(overrides?: CallOverrides): Promise<string>;

  uniswapV3FlashCallback(
    fee0: BigNumberish,
    fee1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceSheet(overrides?: CallOverrides): Promise<string>;

    flashLiquidate(
      params: IFlashUniswapV3.FlashLiquidateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    uniV3Factory(overrides?: CallOverrides): Promise<string>;

    uniV3Quoter(overrides?: CallOverrides): Promise<string>;

    uniV3SwapRouter(overrides?: CallOverrides): Promise<string>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FlashLoanAndLiquidateBorrow(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      liquidator?: string | null,
      borrower?: string | null,
      bond?: string | null,
      underlyingAmount?: null,
      seizeAmount?: null,
      sellAmount?: null,
      repayAmount?: null,
      subsidyAmount?: null,
      profitAmount?: null
    ): FlashLoanAndLiquidateBorrowEventFilter;
    FlashLoanAndLiquidateBorrow(
      liquidator?: string | null,
      borrower?: string | null,
      bond?: string | null,
      underlyingAmount?: null,
      seizeAmount?: null,
      sellAmount?: null,
      repayAmount?: null,
      subsidyAmount?: null,
      profitAmount?: null
    ): FlashLoanAndLiquidateBorrowEventFilter;
  };

  estimateGas: {
    balanceSheet(overrides?: CallOverrides): Promise<BigNumber>;

    flashLiquidate(
      params: IFlashUniswapV3.FlashLiquidateParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    uniV3Quoter(overrides?: CallOverrides): Promise<BigNumber>;

    uniV3SwapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceSheet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLiquidate(
      params: IFlashUniswapV3.FlashLiquidateParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV3Quoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV3SwapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3FlashCallback(
      fee0: BigNumberish,
      fee1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
