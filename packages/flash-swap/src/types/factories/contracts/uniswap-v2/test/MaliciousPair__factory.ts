/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MaliciousPair,
  MaliciousPairInterface,
} from "../../../../contracts/uniswap-v2/test/MaliciousPair";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collateral_",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlying_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collateral",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "contract IUniswapV2Callee",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030838038061030883398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61024a806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636f307dc3116100505780636f307dc3146100aa578063d21220a7146100bd578063d8dfeb45146100ce57600080fd5b8063022c0d9f1461006c5780630dfe168114610081575b600080fd5b61007f61007a36600461014e565b6100e1565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b60015461008e906001600160a01b031681565b6001546001600160a01b031661008e565b60005461008e906001600160a01b031681565b6040516304347a1760e21b81526001600160a01b038416906310d1e85c9061011590339089908990889088906004016101f0565b600060405180830381600087803b15801561012f57600080fd5b505af1158015610143573d6000803e3d6000fd5b505050505050505050565b60008060008060006080868803121561016657600080fd5b853594506020860135935060408601356001600160a01b038116811461018b57600080fd5b9250606086013567ffffffffffffffff808211156101a857600080fd5b818801915088601f8301126101bc57600080fd5b8135818111156101cb57600080fd5b8960208285010111156101dd57600080fd5b9699959850939650602001949392505050565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f1916010194935050505056fea164736f6c634300080c000a";

type MaliciousPairConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousPairConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousPair__factory extends ContractFactory {
  constructor(...args: MaliciousPairConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    collateral_: PromiseOrValue<string>,
    underlying_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MaliciousPair> {
    return super.deploy(
      collateral_,
      underlying_,
      overrides || {}
    ) as Promise<MaliciousPair>;
  }
  override getDeployTransaction(
    collateral_: PromiseOrValue<string>,
    underlying_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      collateral_,
      underlying_,
      overrides || {}
    );
  }
  override attach(address: string): MaliciousPair {
    return super.attach(address) as MaliciousPair;
  }
  override connect(signer: Signer): MaliciousPair__factory {
    return super.connect(signer) as MaliciousPair__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousPairInterface {
    return new utils.Interface(_abi) as MaliciousPairInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousPair {
    return new Contract(address, _abi, signerOrProvider) as MaliciousPair;
  }
}
