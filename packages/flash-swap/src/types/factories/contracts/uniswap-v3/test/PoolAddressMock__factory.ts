/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  PoolAddressMock,
  PoolAddressMockInterface,
} from "../../../../contracts/uniswap-v3/test/PoolAddressMock";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolAddressMock.PoolKey",
        name: "key",
        type: "tuple",
      },
    ],
    name: "computeAddress",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "getPoolKey",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolAddressMock.PoolKey",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061033f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632b6d5d8f1461003b57806383092a8214610088575b600080fd5b61004e61004936600461024e565b6100b3565b6040805182516001600160a01b039081168252602080850151909116908201529181015162ffffff16908201526060015b60405180910390f35b61009b610096366004610291565b61011e565b6040516001600160a01b03909116815260200161007f565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b031611156100ee579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b03161061014657600080fd5b815160208084015160408086015181516001600160a01b0395861681860152949092168482015262ffffff90911660608085019190915281518085038201815260808501909252815191909201207fff0000000000000000000000000000000000000000000000000000000000000060a08401529085901b6bffffffffffffffffffffffff191660a183015260b58201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d582015260f50160408051601f1981840301815291905280516020909101209392505050565b80356001600160a01b038116811461023657600080fd5b919050565b803562ffffff8116811461023657600080fd5b60008060006060848603121561026357600080fd5b61026c8461021f565b925061027a6020850161021f565b91506102886040850161023b565b90509250925092565b60008082840360808112156102a557600080fd5b6102ae8461021f565b92506060601f19820112156102c257600080fd5b506040516060810181811067ffffffffffffffff821117156102f457634e487b7160e01b600052604160045260246000fd5b6040526103036020850161021f565b81526103116040850161021f565b60208201526103226060850161023b565b604082015280915050925092905056fea164736f6c634300080c000a";

type PoolAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolAddressMock__factory extends ContractFactory {
  constructor(...args: PoolAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolAddressMock> {
    return super.deploy(overrides || {}) as Promise<PoolAddressMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PoolAddressMock {
    return super.attach(address) as PoolAddressMock;
  }
  override connect(signer: Signer): PoolAddressMock__factory {
    return super.connect(signer) as PoolAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolAddressMockInterface {
    return new utils.Interface(_abi) as PoolAddressMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolAddressMock {
    return new Contract(address, _abi, signerOrProvider) as PoolAddressMock;
  }
}
