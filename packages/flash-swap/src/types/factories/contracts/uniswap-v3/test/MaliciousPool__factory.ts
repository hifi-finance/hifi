/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MaliciousPool,
  MaliciousPoolInterface,
} from "../../../../contracts/uniswap-v3/test/MaliciousPool";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collateral_",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlying_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collateral",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "flash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102ee3803806102ee83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610230806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636f307dc3116100505780636f307dc3146100aa578063d21220a7146100bd578063d8dfeb45146100ce57600080fd5b80630dfe16811461006c578063490e6cbc14610095575b600080fd5b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6100a86100a3366004610144565b6100e1565b005b600154610079906001600160a01b031681565b6001546001600160a01b0316610079565b600054610079906001600160a01b031681565b604051630e9cbafb60e41b8152339063e9cbafb09061010b906000908190879087906004016101e6565b600060405180830381600087803b15801561012557600080fd5b505af1158015610139573d6000803e3d6000fd5b505050505050505050565b60008060008060006080868803121561015c57600080fd5b85356001600160a01b038116811461017357600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff8082111561019e57600080fd5b818801915088601f8301126101b257600080fd5b8135818111156101c157600080fd5b8960208285010111156101d357600080fd5b9699959850939650602001949392505050565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f19160101939250505056fea164736f6c634300080c000a";

type MaliciousPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousPool__factory extends ContractFactory {
  constructor(...args: MaliciousPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    collateral_: string,
    underlying_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MaliciousPool> {
    return super.deploy(
      collateral_,
      underlying_,
      overrides || {}
    ) as Promise<MaliciousPool>;
  }
  override getDeployTransaction(
    collateral_: string,
    underlying_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      collateral_,
      underlying_,
      overrides || {}
    );
  }
  override attach(address: string): MaliciousPool {
    return super.attach(address) as MaliciousPool;
  }
  override connect(signer: Signer): MaliciousPool__factory {
    return super.connect(signer) as MaliciousPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousPoolInterface {
    return new utils.Interface(_abi) as MaliciousPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousPool {
    return new Contract(address, _abi, signerOrProvider) as MaliciousPool;
  }
}
